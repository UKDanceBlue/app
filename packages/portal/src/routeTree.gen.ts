/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as TeamsIndexImport } from './routes/teams/index'
import { Route as PeopleIndexImport } from './routes/people/index'
import { Route as NotificationsIndexImport } from './routes/notifications/index'
import { Route as MarathonIndexImport } from './routes/marathon/index'
import { Route as ImagesIndexImport } from './routes/images/index'
import { Route as FeedIndexImport } from './routes/feed/index'
import { Route as EventsIndexImport } from './routes/events/index'
import { Route as ConfigIndexImport } from './routes/config/index'
import { Route as EventsCreateImport } from './routes/events/create'
import { Route as EventsEventIdIndexImport } from './routes/events/$eventId/index'
import { Route as EventsEventIdEditImport } from './routes/events/$eventId/edit'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TeamsIndexRoute = TeamsIndexImport.update({
  path: '/teams/',
  getParentRoute: () => rootRoute,
} as any)

const PeopleIndexRoute = PeopleIndexImport.update({
  path: '/people/',
  getParentRoute: () => rootRoute,
} as any)

const NotificationsIndexRoute = NotificationsIndexImport.update({
  path: '/notifications/',
  getParentRoute: () => rootRoute,
} as any)

const MarathonIndexRoute = MarathonIndexImport.update({
  path: '/marathon/',
  getParentRoute: () => rootRoute,
} as any)

const ImagesIndexRoute = ImagesIndexImport.update({
  path: '/images/',
  getParentRoute: () => rootRoute,
} as any)

const FeedIndexRoute = FeedIndexImport.update({
  path: '/feed/',
  getParentRoute: () => rootRoute,
} as any)

const EventsIndexRoute = EventsIndexImport.update({
  path: '/events/',
  getParentRoute: () => rootRoute,
} as any)

const ConfigIndexRoute = ConfigIndexImport.update({
  path: '/config/',
  getParentRoute: () => rootRoute,
} as any)

const EventsCreateRoute = EventsCreateImport.update({
  path: '/events/create',
  getParentRoute: () => rootRoute,
} as any)

const EventsEventIdIndexRoute = EventsEventIdIndexImport.update({
  path: '/events/$eventId/',
  getParentRoute: () => rootRoute,
} as any)

const EventsEventIdEditRoute = EventsEventIdEditImport.update({
  path: '/events/$eventId/edit',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/events/create': {
      id: '/events/create'
      path: '/events/create'
      fullPath: '/events/create'
      preLoaderRoute: typeof EventsCreateImport
      parentRoute: typeof rootRoute
    }
    '/config/': {
      id: '/config/'
      path: '/config'
      fullPath: '/config'
      preLoaderRoute: typeof ConfigIndexImport
      parentRoute: typeof rootRoute
    }
    '/events/': {
      id: '/events/'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof EventsIndexImport
      parentRoute: typeof rootRoute
    }
    '/feed/': {
      id: '/feed/'
      path: '/feed'
      fullPath: '/feed'
      preLoaderRoute: typeof FeedIndexImport
      parentRoute: typeof rootRoute
    }
    '/images/': {
      id: '/images/'
      path: '/images'
      fullPath: '/images'
      preLoaderRoute: typeof ImagesIndexImport
      parentRoute: typeof rootRoute
    }
    '/marathon/': {
      id: '/marathon/'
      path: '/marathon'
      fullPath: '/marathon'
      preLoaderRoute: typeof MarathonIndexImport
      parentRoute: typeof rootRoute
    }
    '/notifications/': {
      id: '/notifications/'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof NotificationsIndexImport
      parentRoute: typeof rootRoute
    }
    '/people/': {
      id: '/people/'
      path: '/people'
      fullPath: '/people'
      preLoaderRoute: typeof PeopleIndexImport
      parentRoute: typeof rootRoute
    }
    '/teams/': {
      id: '/teams/'
      path: '/teams'
      fullPath: '/teams'
      preLoaderRoute: typeof TeamsIndexImport
      parentRoute: typeof rootRoute
    }
    '/events/$eventId/edit': {
      id: '/events/$eventId/edit'
      path: '/events/$eventId/edit'
      fullPath: '/events/$eventId/edit'
      preLoaderRoute: typeof EventsEventIdEditImport
      parentRoute: typeof rootRoute
    }
    '/events/$eventId/': {
      id: '/events/$eventId/'
      path: '/events/$eventId'
      fullPath: '/events/$eventId'
      preLoaderRoute: typeof EventsEventIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  EventsCreateRoute,
  ConfigIndexRoute,
  EventsIndexRoute,
  FeedIndexRoute,
  ImagesIndexRoute,
  MarathonIndexRoute,
  NotificationsIndexRoute,
  PeopleIndexRoute,
  TeamsIndexRoute,
  EventsEventIdEditRoute,
  EventsEventIdIndexRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/events/create",
        "/config/",
        "/events/",
        "/feed/",
        "/images/",
        "/marathon/",
        "/notifications/",
        "/people/",
        "/teams/",
        "/events/$eventId/edit",
        "/events/$eventId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/events/create": {
      "filePath": "events/create.tsx"
    },
    "/config/": {
      "filePath": "config/index.tsx"
    },
    "/events/": {
      "filePath": "events/index.tsx"
    },
    "/feed/": {
      "filePath": "feed/index.tsx"
    },
    "/images/": {
      "filePath": "images/index.tsx"
    },
    "/marathon/": {
      "filePath": "marathon/index.tsx"
    },
    "/notifications/": {
      "filePath": "notifications/index.tsx"
    },
    "/people/": {
      "filePath": "people/index.tsx"
    },
    "/teams/": {
      "filePath": "teams/index.tsx"
    },
    "/events/$eventId/edit": {
      "filePath": "events/$eventId/edit.tsx"
    },
    "/events/$eventId/": {
      "filePath": "events/$eventId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
