import { Bar } from "@nivo/bar";
import { useTheme } from "@nivo/core";
import { createFileRoute } from "@tanstack/react-router";
import { useWindowSize } from "@uidotdev/usehooks";
import { Button, Flex, Space, Table } from "antd";
import { useCallback, useMemo, useState } from "react";
import { utils, type WorkBook, writeFile } from "xlsx";

import type {
  ReportConfigFormat,
  ReportType,
} from "#elements/components/fundraising/FundraisingReportSelection.js";
import { FundraisingReportSelection } from "#elements/components/fundraising/FundraisingReportSelection.js";
import { useLoginState } from "#hooks/useLoginState.js";

export const Route = createFileRoute("/fundraising/report")({
  component: RouteComponent,
});

function RouteComponent() {
  const [workbook, setWorkbook] = useState<WorkBook | null>(null);
  const [format, setFormat] = useState<ReportConfigFormat>("xlsx");
  const [reportType, setReportType] = useState<ReportType>("summary");

  const { width } = useWindowSize();

  const tableTheme = useTheme();

  const { me } = useLoginState();

  let chart = null;

  switch (reportType) {
    case "summary": {
      break;
    }
    case "totals-by-solicitation":
    case "totals-by-day": {
      if (!workbook?.SheetNames[0]) {
        break;
      }
      chart = (
        <Bar
          width={
            (workbook.Sheets[workbook.SheetNames[0]]?.["!cols"]?.length ?? 0) *
              100 +
            150
          }
          height={800}
          theme={tableTheme}
          valueScale={{ type: "symlog", constant: 100 }}
          data={utils
            .sheet_to_json(workbook.Sheets[workbook.SheetNames[0]]!)
            .map((row) => {
              if (reportType === "totals-by-day") {
                const { Date, ...rest } = row as Record<
                  string,
                  number | string
                >;
                const newRow: Record<string, number | string> = {
                  Date: String(Date),
                };
                for (const key in rest) {
                  if (Number(rest[key]) !== 0) newRow[key] = rest[key] ?? 0;
                }
                return newRow;
              } else {
                const { "Solicitation Code": SolicitationCode, ...rest } =
                  row as Record<string, number | string>;
                const newRow: Record<string, number | string> = {
                  "Solicitation Code": SolicitationCode ?? "",
                };
                for (const key in rest) {
                  if (Number(rest[key]) !== 0) newRow[key] = rest[key] ?? 0;
                }
                return newRow;
              }
            })}
          indexBy={
            reportType === "totals-by-solicitation"
              ? "Solicitation Code"
              : "Date"
          }
          keys={[
            "DBFunds",
            "Check",
            "Transmittal",
            "Credit Card",
            "ACH",
            "Non-cash",
            "Payroll Deduction",
            "Unknown",
          ]}
          colors={{
            scheme: "category10",
          }}
          margin={{ top: 50, right: 50, bottom: 50, left: 100 }}
          valueFormat="$1.2f"
          axisBottom={{
            format: (value) => {
              if (reportType === "totals-by-solicitation") {
                return String(value).split(" ")[0]!;
              }
              return String(value);
            },
          }}
        />
      );
      break;
    }
    case "type-by-team-per-day":
  }

  const download = useCallback(() => {
    if (!workbook) {
      return;
    }

    writeFile(
      workbook,
      `${(workbook.Custprops as { title?: string } | undefined)?.title ?? "fundraising-report"}.${format}`,
      {
        bookType: format,
        bookSST: true,
        compression: true,
        Props: {
          Author: me?.name ?? me?.linkblue ?? me?.email ?? undefined,
          Comments: "Generated by UK DanceBlue Web Portal",
          CreatedDate: new Date(),
          Company: "University of Kentucky DanceBlue",
          Title: (workbook.Custprops as { title?: string } | undefined)?.title,
        },
      }
    );
  }, [workbook, format, me]);

  const previews = useMemo(() => {
    let previews = [];
    let breakCounter = 0;

    for (const sheetName of workbook?.SheetNames ?? []) {
      if (!workbook) {
        continue;
      }
      const sheet = workbook.Sheets[sheetName];
      if (!sheet) {
        continue;
      }

      const [header, ...rows] = sheet["!data"] ?? [];

      breakCounter += sheet["!cols"]?.length ?? 0;

      if (breakCounter > 1000) {
        previews = [
          <p key="too-many-cells">
            This spreadsheet is too large to display previews for all sheets,
            select a smaller range or download the spreadsheet to view the data.
          </p>,
        ];
        break;
      }

      previews.push(
        <Table
          title={workbook.SheetNames.length > 1 ? () => sheetName : undefined}
          key={`preview-${sheetName}`}
          columns={
            header?.map((cell, idx) => ({
              title: String(cell.v),
              dataIndex: idx,
              render(value) {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-member-access
                return value?.v ?? value;
              },
            })) ?? []
          }
          pagination={false}
          dataSource={rows}
          style={{ width: "100%" }}
        />
      );
    }

    return previews;
  }, [workbook]);

  return (
    <Space
      direction="vertical"
      size="large"
      align="center"
      style={{ width: "100%" }}
    >
      <h1>Fundraising Report Generator</h1>
      <p>
        More charts and reports will be added in the future. If you have a
        specific request, please contact Tech!
      </p>
      <Flex vertical gap={8}>
        <FundraisingReportSelection
          setData={setWorkbook}
          setFormat={setFormat}
          setReportType={setReportType}
        />
        <div
          style={{
            maxWidth: (width ?? 1400) - 500,
            overflow: "hidden",
            overflowX: "auto",
            scrollbarWidth: "thin",
            scrollbarColor: "#ccc #0000",
          }}
        >
          {chart}
        </div>
        <Flex justify="center">
          <Button onClick={download} type="primary" size="large">
            Download Spreadsheet
          </Button>
        </Flex>
        {previews}
      </Flex>
    </Space>
  );
}
