/// This table is kept in sync with the DBFunds API and should not be modified
model DBFundsTeam {
  /// Unrelated to the 'id' field in the DBFunds API
  id                 Int                       @id @default(autoincrement())
  /// The team's name from the DBFunds API
  name               String
  /// The team's total fundraising amount from the DBFunds API
  totalAmount        Float
  /// Whether the team is active in DBFunds
  active             Boolean
  marathonId         Int?
  uuid               String                    @unique(map: "DBFundsTeam_uuid_unique") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  /// The team's DbNum from the DBFunds API is actually a solicitation code
  solicitationCodeId Int
  createdAt          DateTime                  @default(now()) @db.Timestamptz(6)
  fundraisingEntries DBFundsFundraisingEntry[]
  marathon           Marathon?                 @relation(fields: [marathonId], references: [id], map: "DBFundsTeam_marathonId_Marathon_id_fk")
  solicitationCode   SolicitationCode          @relation(fields: [solicitationCodeId], references: [id], map: "DBFundsTeam_solicitationCodeId_SolicitationCode_id_fk")

  @@unique([solicitationCodeId, marathonId], map: "DBFundsTeam_solicitationCodeId_marathonId_unique")
}

/// This table is kept in sync with the DBFunds API and should not be modified
model DBFundsFundraisingEntry {
  /// Unrelated to the 'id' field in the DBFunds API
  id                       Int                       @id @default(autoincrement())
  /// The amount of the entry
  amount                   Decimal
  /// Who made the donation
  donatedBy                String?
  /// Who the donation was made for
  donatedTo                String?
  /// The date of the donation
  date                     DateTime
  /// The team's DbNum from the DBFunds API
  dbFundsTeamId            Int
  uuid                     String                    @unique(map: "DBFundsFundraisingEntry_uuid_unique") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fundraisingEntryId       Int                       @unique(map: "DBFundsFundraisingEntry_fundraisingEntryId_unique")
  createdAt                DateTime                  @default(now()) @db.Timestamptz(6)
  dbFundsTeam              DBFundsTeam               @relation(fields: [dbFundsTeamId], references: [id], onDelete: Cascade, map: "DBFundsFundraisingEntry_dbFundsTeamId_DBFundsTeam_id_fk")
  fundraisingEntry         FundraisingEntry          @relation(fields: [fundraisingEntryId], references: [id], onDelete: Cascade, map: "DBFundsFundraisingEntry_fundraisingEntry")
  fundraisingEntryWithMeta FundraisingEntryWithMeta? @relation(fields: [fundraisingEntryId], references: [id], map: "DBFundsFundraisingEntry_fundraisingEntryWithMeta")

  @@unique([donatedTo, donatedBy, date, dbFundsTeamId], map: "DBFundsFundraisingEntry_donatedTo_donatedBy_date_dbFundsTeamId_")
}
