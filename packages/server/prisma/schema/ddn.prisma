model DailyDepartmentNotification {
  division                 String?
  department               String?
  effectiveDate            DateTime?                        @db.Date
  processDate              DateTime                         @db.Date
  pledgedDate              DateTime?                        @db.Date
  transactionDate          DateTime?                        @db.Date
  transactionType          String
  combinedAmount           Decimal
  pledgedAmount            Decimal
  accountNumber            String
  accountName              String
  holdingDestination       String?
  comment                  String?
  secShares                String?
  secType                  String?
  gikType                  String?
  gikDescription           String?
  onlineGift               Boolean
  solicitation             String?
  behalfHonorMemorial      String?
  matchingGift             String?
  ukFirstGift              Boolean
  divFirstGift             Boolean
  idSorter                 String
  combinedDonorName        String
  combinedDonorSalutation  String
  combinedDonorSort        String?
  transmittalSn            String?
  sapDocNum                String?
  sapDocDate               DateTime?                        @db.Date
  jvDocNum                 String?
  jvDocDate                DateTime?                        @db.Date
  advFeeCcPhil             String?
  advFeeAmtPhil            Decimal?
  advFeeCcUnit             String?
  advFeeAmtUnit            Decimal?
  advFeeStatus             String?
  hcUnit                   String?
  id                       Int                              @id @default(autoincrement())
  solicitationCodeId       Int
  fundraisingEntryId       Int                              @unique(map: "DailyDepartmentNotification_fundraisingEntryId_unique")
  uuid                     String                           @unique(map: "DailyDepartmentNotification_uuid_unique") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  batchId                  Int
  createdAt                DateTime                         @default(now()) @db.Timestamptz(6)
  updatedAt                DateTime                         @default(now()) @db.Timestamptz(6)
  donors                   DDNDonorLink[]
  batch                    DailyDepartmentNotificationBatch @relation(fields: [batchId], references: [id], onDelete: Cascade, map: "DailyDepartmentNotification_batchId_DailyDepartmentNotification")
  fundraisingEntry         FundraisingEntry                 @relation(fields: [fundraisingEntryId], references: [id], onDelete: Cascade, map: "DailyDepartmentNotification_fundraisingEntry")
  solicitationCode         SolicitationCode                 @relation(fields: [solicitationCodeId], references: [id], map: "DailyDepartmentNotification_solicitationCodeId_SolicitationCode")
  fundraisingEntryWithMeta FundraisingEntryWithMeta?        @relation(fields: [fundraisingEntryId], references: [id], map: "DailyDepartmentNotification_fundraisingEntryWithMeta")
}

model DDNDonor {
  id           Int            @id @default(autoincrement())
  uuid         String         @unique(map: "DDNDonor_uuid_unique") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  donorId      String         @unique(map: "DDNDonor_donorId_unique")
  giftKey      String?
  name         String?
  deceased     Boolean
  constituency String?
  titleBar     String?
  pm           String?
  degrees      String[]
  emails       String[]
  createdAt    DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime       @default(now()) @db.Timestamptz(6)
  donations    DDNDonorLink[]
}

model DDNDonorLink {
  donorId   Int
  ddnId     Int
  amount    Decimal
  relation  String?
  createdAt DateTime                    @default(now()) @db.Timestamptz(6)
  updatedAt DateTime                    @default(now()) @db.Timestamptz(6)
  ddn       DailyDepartmentNotification @relation(fields: [ddnId], references: [id], map: "DDNDonorLink_ddnId_DailyDepartmentNotification_id_fk")
  donor     DDNDonor                    @relation(fields: [donorId], references: [id], map: "DDNDonorLink_donorId_DDNDonor_id_fk")

  @@id([donorId, ddnId], map: "DDNDonorLink_donorId_ddnId_pk")
}

model DailyDepartmentNotificationBatch {
  batchId    String                        @unique(map: "DailyDepartmentNotificationBatch_batchId_unique")
  id         Int                           @id @default(autoincrement())
  uuid       String                        @unique(map: "DailyDepartmentNotificationBatch_uuid_unique") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime                      @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime                      @default(now()) @db.Timestamptz(6)
  memberDDNs DailyDepartmentNotification[]
}
