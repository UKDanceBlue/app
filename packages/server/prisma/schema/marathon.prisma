model Marathon {
  id                 Int                @id @default(autoincrement())
  uuid               String             @unique() @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @updatedAt @db.Timestamptz(6)
  year               String             @unique()
  startDate          DateTime?          @db.Timestamptz(6)
  endDate            DateTime?          @db.Timestamptz(6)
  dbFundsTeams       DBFundsTeam[]
  hours              MarathonHour[]
  pointOpportunities PointOpportunity[]
  teams              Team[]
}

model MarathonHour {
  id              Int                    @id @default(autoincrement())
  uuid            String                 @unique() @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  marathonId      Int
  title           String
  details         String?
  shownStartingAt DateTime               @db.Timestamptz(6)
  durationInfo    String
  createdAt       DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime               @updatedAt @db.Timestamptz(6)
  marathon        Marathon               @relation(fields: [marathonId], references: [id], onDelete: Cascade)
  maps            MarathonHourMapImage[]

  @@index([uuid])
}

model MarathonHourMapImage {
  id             Int          @id @default(autoincrement())
  uuid           String       @unique() @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  marathonHourId Int
  imageId        Int
  createdAt      DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime     @updatedAt @db.Timestamptz(6)
  image          Image        @relation(fields: [imageId], references: [id], onDelete: Cascade)
  marathonHour   MarathonHour @relation(fields: [marathonHourId], references: [id], onDelete: Cascade)

  @@index([uuid])
}
