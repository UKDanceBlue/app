model Team {
  id                       Int               @id @default(autoincrement())
  uuid                     String            @unique() @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt                DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt                DateTime          @updatedAt @db.Timestamptz(6)
  name                     String
  type                     TeamType
  legacyStatus             TeamLegacyStatus
  persistentIdentifier     String?           @unique()
  marathonId               Int
  correspondingCommitteeId Int?
  dbFundsTeamId            Int?
  solicitationCodeId       Int?
  memberships              Membership[]
  pointEntries             PointEntry[]
  correspondingCommittee   Committee?        @relation(fields: [correspondingCommitteeId], references: [id])
  marathon                 Marathon          @relation(fields: [marathonId], references: [id], onDelete: Cascade)
  solicitationCode         SolicitationCode? @relation(fields: [solicitationCodeId], references: [id])

  @@unique([marathonId, correspondingCommitteeId])
}

model PointEntry {
  id                 Int               @id @default(autoincrement())
  uuid               String            @unique() @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt          DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime          @updatedAt @db.Timestamptz(6)
  comment            String?
  points             Int
  personFromId       Int?
  teamId             Int
  pointOpportunityId Int?
  person             Person?           @relation(fields: [personFromId], references: [id])
  pointOpportunity   PointOpportunity? @relation(fields: [pointOpportunityId], references: [id])
  team               Team              @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model PointOpportunity {
  id                   Int                   @id @default(autoincrement())
  uuid                 String                @unique() @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt            DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime              @updatedAt @db.Timestamptz(6)
  name                 String
  opportunityDate      DateTime?             @db.Timestamptz(6)
  type                 PointOpportunityType
  eventId              Int?
  marathonId           Int
  pointEntries         PointEntry[]
  event                Event?                @relation(fields: [eventId], references: [id])
  eventWithOccurrences EventWithOccurrences? @relation(fields: [eventId], references: [id], map: "eventWithOccurrencesRelation")
  marathon             Marathon              @relation(fields: [marathonId], references: [id], onDelete: Cascade)
}

enum TeamLegacyStatus {
  NewTeam
  ReturningTeam
  DemoTeam
}

enum TeamType {
  Spirit
  Morale
  Mini
}

enum PointOpportunityType {
  Spirit
  Morale
  Committee
}
