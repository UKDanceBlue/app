model Team {
  id                       Int               @id @default(autoincrement())
  uuid                     String            @unique(map: "Team_uuid_unique") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt                DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt                DateTime          @updatedAt @db.Timestamptz(6)
  name                     String
  type                     TeamType
  legacyStatus             TeamLegacyStatus
  persistentIdentifier     String?           @unique(map: "Team_persistentIdentifier_unique")
  marathonId               Int
  correspondingCommitteeId Int?              @unique(map: "Team_correspondingCommitteeId_unique")
  dbFundsTeamId            Int?
  solicitationCodeId       Int?
  memberships              Membership[]
  pointEntries             PointEntry[]
  correspondingCommittee   Committee?        @relation(fields: [correspondingCommitteeId], references: [id], map: "Team_correspondingCommitteeId_Committee_id_fk")
  marathon                 Marathon          @relation(fields: [marathonId], references: [id], onDelete: Cascade, map: "Team_marathonId_Marathon_id_fk")
  solicitationCode         SolicitationCode? @relation(fields: [solicitationCodeId], references: [id], map: "Team_solicitationCodeId_SolicitationCode_id_fk")
}

model PointEntry {
  id                 Int              @id @default(autoincrement())
  uuid               String           @unique(map: "PointEntry_uuid_unique") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @updatedAt @db.Timestamptz(6)
  comment            String?
  points             Int
  personFromId       Int?
  teamId             Int
  pointOpportunityId Int
  person             Person?          @relation(fields: [personFromId], references: [id], map: "PointEntry_personFromId_Person_id_fk")
  pointOpportunity   PointOpportunity @relation(fields: [pointOpportunityId], references: [id], map: "PointEntry_pointOpportunityId_PointOpportunity_id_fk")
  team               Team             @relation(fields: [teamId], references: [id], onDelete: Cascade, map: "PointEntry_teamId_Team_id_fk")
}

model PointOpportunity {
  id              Int                  @id @default(autoincrement())
  uuid            String               @unique(map: "PointOpportunity_uuid_unique") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt       DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime             @updatedAt @db.Timestamptz(6)
  name            String
  opportunityDate DateTime?            @db.Timestamptz(6)
  type            PointOpportunityType
  eventId         Int?
  marathonId      Int
  pointEntries    PointEntry[]
  event           Event?               @relation(fields: [eventId], references: [id], map: "PointOpportunity_eventId_Event_id_fk")
  marathon        Marathon             @relation(fields: [marathonId], references: [id], onDelete: Cascade, map: "PointOpportunity_marathonId_Marathon_id_fk")
}

enum TeamLegacyStatus {
  NewTeam
  ReturningTeam
  DemoTeam
}

enum TeamType {
  Spirit
  Morale
  Mini
}

enum PointOpportunityType {
  Spirit
  Morale
  Committee
}
