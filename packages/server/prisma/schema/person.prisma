model Person {
  id                                Int                        @id @default(autoincrement())
  uuid                              String                     @unique() @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt                         DateTime                   @default(now()) @db.Timestamptz(6)
  updatedAt                         DateTime                   @updatedAt @db.Timestamptz(6)
  name                              String?                    @db.Citext
  email                             String                     @unique() @db.Citext
  linkblue                          String?                    @unique() @db.Citext
  preferences                       Json                       @default("{}")
  hashedPassword                    Bytes?
  salt                              Bytes?
  edits                             AuditLog[]
  authIdPairs                       AuthIdPair[]
  devices                           Device[]
  ownedFiles                        File[]
  assignedFundraisingEntries        FundraisingAssignment[]    @relation("fundraising_assignment_assigned_by_person")
  fundraisingAssignment             FundraisingAssignment[]
  createdFundraisingEntries         FundraisingEntry[]
  memberships                       Membership[]
  pointEntries                      PointEntry[]
  createdFundraisingEntriesWithMeta FundraisingEntryWithMeta[]
  sessions                          Session[]
}

model AuthIdPair {
  source   AuthSource
  value    String
  personId Int
  person   Person     @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@id([source, personId])
}

model Membership {
  id            Int                @id @default(autoincrement())
  uuid          String             @unique() @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt     DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime           @updatedAt @db.Timestamptz(6)
  personId      Int
  teamId        Int
  position      MembershipPosition
  committeeRole CommitteeRole?
  person        Person             @relation(fields: [personId], references: [id], onDelete: Cascade)
  team          Team               @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamWithMeta  TeamWithMeta?      @relation(fields: [teamId], references: [id], map: "teamWithMetaMembership")

  @@unique([personId, teamId])
}

model LoginFlow {
  id                   Int      @id @default(autoincrement())
  uuid                 String   @unique() @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt            DateTime @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime @updatedAt @db.Timestamptz(6)
  codeVerifier         String
  redirectToAfterLogin String
  setCookie            Boolean  @default(false)
  sendToken            Boolean  @default(false)

  @@map("LoginFlowSession")
}

model Session {
  id          Int        @id @default(autoincrement())
  uuid        String     @unique() @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  preferences Json       @default("{}")
  authSource  AuthSource
  userAgent   String?
  ip          String?
  expiresAt   DateTime

  personId Int?
  person   Person? @relation(fields: [personId], references: [id], onDelete: Cascade)
}

enum AuthSource {
  LinkBlue
  Anonymous
  Demo
  Password
}

enum MembershipPosition {
  Member
  Captain
}
