model Person {
  id                                Int                        @id @default(autoincrement())
  uuid                              String                     @unique(map: "Person_uuid_unique") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt                         DateTime                   @default(now()) @db.Timestamptz(6)
  updatedAt                         DateTime                   @updatedAt @db.Timestamptz(6)
  name                              String?                    @db.Citext
  email                             String                     @unique(map: "Person_email_unique") @db.Citext
  linkblue                          String?                    @unique(map: "Person_linkblue_unique") @db.Citext
  hashedPassword                    Bytes?
  salt                              Bytes?
  edits                             AuditLog[]
  authIdPairs                       AuthIdPair[]
  devices                           Device[]
  ownedFiles                        File[]
  assignedFundraisingEntries        FundraisingAssignment[]    @relation("fundraising_assignment_assigned_by_person")
  fundraisingAssignment             FundraisingAssignment[]
  createdFundraisingEntries         FundraisingEntry[]
  memberships                       Membership[]
  pointEntries                      PointEntry[]
  createdFundraisingEntriesWithMeta FundraisingEntryWithMeta[]
}

model AuthIdPair {
  source   AuthSource
  value    String
  personId Int
  person   Person     @relation(fields: [personId], references: [id], onDelete: Cascade, map: "AuthIdPair_personId_Person_id_fk")

  @@id([source, personId], map: "AuthIdPair_source_personId_pk")
}

model Membership {
  id            Int                @id @default(autoincrement())
  uuid          String             @unique(map: "Membership_uuid_unique") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt     DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime           @updatedAt @db.Timestamptz(6)
  personId      Int
  teamId        Int
  position      MembershipPosition
  committeeRole CommitteeRole?
  person        Person             @relation(fields: [personId], references: [id], onDelete: Cascade, map: "Membership_personId_Person_id_fk")
  team          Team               @relation(fields: [teamId], references: [id], onDelete: Cascade, map: "Membership_teamId_Team_id_fk")

  @@unique([personId, teamId], map: "Membership_personId_teamId_unique")
}

model LoginFlowSession {
  id                   Int      @id @default(autoincrement())
  uuid                 String   @unique(map: "LoginFlowSession_uuid_unique") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt            DateTime @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime @updatedAt @db.Timestamptz(6)
  codeVerifier         String
  redirectToAfterLogin String
  setCookie            Boolean  @default(false)
  sendToken            Boolean  @default(false)
}

enum AuthSource {
  LinkBlue
  Anonymous
  Demo
  Password
}

enum MembershipPosition {
  Member
  Captain
}
