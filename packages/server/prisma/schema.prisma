generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Configuration {
  id         Int       @id @default(autoincrement())
  uuid       String    @unique() @default(uuid()) @db.Uuid
  key        String
  value      String
  validAfter DateTime? @db.Timestamptz(6)
  validUntil DateTime? @db.Timestamptz(6)
  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime  @updatedAt @db.Timestamptz(6)

  @@index([uuid])
}

model Device {
  id                     Int                    @id @default(autoincrement())
  uuid                   String                 @unique() @default(uuid()) @db.Uuid
  createdAt              DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime               @updatedAt @db.Timestamptz(6)
  /// Verifier for the device, this is a base64 encoded SHA512 digest of a secret the device knows
  ///
  /// This is nullable for devices that were registered before we started using the
  /// verifier and will be set once the device registers next and will never be null again
  ///
  /// This means that when this is null, simply trust the device
  verifier               String?
  /// The Expo push token for the device, if available
  expoPushToken          String?
  /// The last time the device was seen
  lastSeen               DateTime?              @db.Timestamptz(6)
  lastSeenPersonId       Int?
  /// The last person to use the device
  lastSeenPerson         Person?                @relation(fields: [lastSeenPersonId], references: [id])
  /// The notifications that have been sent to this device
  deliveredNotifications NotificationDelivery[]

  @@index([uuid])
}

model EventImage {
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  eventId   Int
  imageId   Int
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@id([eventId, imageId])
}

model EventOccurrence {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique() @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  fullDay   Boolean  @default(false)
  date      DateTime @db.Timestamptz(6)
  endDate   DateTime @db.Timestamptz(6)
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([uuid])
}

model Event {
  id                 Int                @id @default(autoincrement())
  uuid               String             @unique() @default(uuid()) @db.Uuid
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @updatedAt @db.Timestamptz(6)
  title              String
  summary            String?
  description        String?
  location           String?
  eventImages        EventImage[]
  eventOccurrences   EventOccurrence[]
  pointOpportunities PointOpportunity[]

  @@index([uuid])
}

model Image {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique() @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  thumbHash Bytes?
  alt       String?
  width     Int
  height    Int

  file   File? @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId Int?

  eventImages           EventImage[]
  marathonHourMapImages MarathonHourMapImage[]
  feedItems             FeedItem[]

  @@index([uuid])
}

model File {
  id   Int    @id @default(autoincrement())
  uuid String @unique() @default(uuid()) @db.Uuid

  filename        String
  mimeTypeName    String   @db.VarChar(127)
  mimeSubtypeName String   @db.VarChar(127)
  mimeParameters  String[]
  locationUrl     String

  requiresLogin Boolean @default(false)

  owner   Person? @relation(fields: [ownedBy], references: [id])
  ownedBy Int?

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  images    Image[]

  @@index([uuid])
}

model LoginFlowSession {
  id                   Int      @id @default(autoincrement())
  uuid                 String   @unique() @default(uuid()) @db.Uuid
  createdAt            DateTime @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime @updatedAt @db.Timestamptz(6)
  codeVerifier         String
  redirectToAfterLogin String
  setCookie            Boolean  @default(false)
  sendToken            Boolean  @default(false)

  @@index([uuid])
}

model Membership {
  id            Int                @id @default(autoincrement())
  uuid          String             @unique() @default(uuid()) @db.Uuid
  createdAt     DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime           @updatedAt @db.Timestamptz(6)
  personId      Int
  teamId        Int
  committeeRole CommitteeRole?
  position      MembershipPosition
  person        Person             @relation(fields: [personId], references: [id], onDelete: Cascade)
  team          Team               @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([personId, teamId])
  @@index([uuid])
}

model Person {
  id                         Int                        @id @default(autoincrement())
  uuid                       String                     @unique() @default(uuid()) @db.Uuid
  createdAt                  DateTime                   @default(now()) @db.Timestamptz(6)
  updatedAt                  DateTime                   @updatedAt @db.Timestamptz(6)
  name                       String?                    @db.Citext
  email                      String                     @unique() @db.Citext
  linkblue                   String?                    @unique() @db.Citext
  authIdPairs                AuthIdPair[]
  devices                    Device[]
  memberships                Membership[]
  pointEntries               PointEntry[]
  ownedFiles                 File[]
  fundraisingEntry           FundraisingEntryWithMeta[]
  fundraisingAssignment      FundraisingAssignment[]
  assignedFundraisingEntries FundraisingAssignment[]    @relation("fundraising_assignment_assigned_by_person")
  FundraisingEntry           FundraisingEntry[]

  @@index([uuid])
}

model AuthIdPair {
  source   AuthSource
  value    String
  personId Int
  person   Person     @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@id([personId, source])
}

model PointEntry {
  id                 Int               @id @default(autoincrement())
  uuid               String            @unique() @default(uuid()) @db.Uuid
  createdAt          DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime          @updatedAt @db.Timestamptz(6)
  comment            String?
  points             Int
  personFromId       Int?
  teamId             Int
  pointOpportunityId Int?
  person             Person?           @relation(fields: [personFromId], references: [id])
  pointOpportunity   PointOpportunity? @relation(fields: [pointOpportunityId], references: [id])
  team               Team              @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([uuid])
}

model PointOpportunity {
  id              Int                  @id @default(autoincrement())
  uuid            String               @unique() @default(uuid()) @db.Uuid
  createdAt       DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime             @updatedAt @db.Timestamptz(6)
  name            String
  opportunityDate DateTime?            @db.Timestamptz(6)
  type            PointOpportunityType
  eventId         Int?
  pointEntries    PointEntry[]
  event           Event?               @relation(fields: [eventId], references: [id])
  marathonId      Int
  marathon        Marathon             @relation(fields: [marathonId], references: [id])

  @@index([uuid])
}

model Team {
  id                       Int              @id @default(autoincrement())
  uuid                     String           @unique() @default(uuid()) @db.Uuid
  name                     String
  type                     TeamType
  legacyStatus             TeamLegacyStatus
  marathon                 Marathon         @relation(fields: [marathonId], references: [id], onDelete: Cascade)
  marathonId               Int
  persistentIdentifier     String?
  memberships              Membership[]
  pointEntries             PointEntry[]
  correspondingCommittee   Committee?       @relation(fields: [correspondingCommitteeId], references: [id])
  correspondingCommitteeId Int?
  dbFundsTeam              DBFundsTeam?     @relation(fields: [dbFundsTeamId], references: [id])
  dbFundsTeamId            Int?

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@unique([marathonId, persistentIdentifier])
  @@unique([marathonId, correspondingCommitteeId])
  @@index([uuid])
}

model Committee {
  id                 Int           @id @default(autoincrement())
  uuid               String        @unique() @default(uuid()) @db.Uuid
  identifier         CommitteeName @unique
  correspondingTeams Team[]
  parentCommittee    Committee?    @relation(fields: [parentCommitteeId], references: [id], name: "parent_committee")
  childCommittees    Committee[]   @relation("parent_committee")
  parentCommitteeId  Int?

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@index([uuid])
}

view TeamsWithTotalPoints {
  id                   Int              @id @unique
  uuid                 String           @unique @db.Uuid
  name                 String
  type                 TeamType
  legacyStatus         TeamLegacyStatus
  persistentIdentifier String?          @unique
  marathon             Marathon         @relation(fields: [marathonId], references: [id])
  marathonId           Int
  createdAt            DateTime         @db.Timestamptz(6)
  updatedAt            DateTime         @db.Timestamptz(6)
  totalPoints          BigInt
}

model Notification {
  id                          Int                    @id @default(autoincrement())
  uuid                        String                 @unique() @default(uuid()) @db.Uuid
  createdAt                   DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt                   DateTime               @updatedAt @db.Timestamptz(6)
  title                       String
  body                        String
  /// The time at which the notification should be sent, if null it's already been sent
  sendAt                      DateTime?              @db.Timestamptz(6)
  /// The time at which the process of sending the notification was started
  startedSendingAt            DateTime?              @db.Timestamptz(6)
  /// URL to open when the notification is tapped
  url                         String?
  /// Every individual delivery of the notification
  deliveries                  NotificationDelivery[]
  /// If set, indicates a potential issue with delivery of the entire notification
  deliveryIssue               String?
  /// If set, indicates the time at which the delivery issue was acknowledged, null until then
  deliveryIssueAcknowledgedAt DateTime?              @db.Timestamptz(6)

  @@index([uuid])
}

/// A record of a notification being sent to a device
model NotificationDelivery {
  id               Int                @id @default(autoincrement())
  uuid             String             @unique() @default(uuid()) @db.Uuid
  deviceId         Int
  notificationId   Int
  /// The device to which the notification was sent
  device           Device             @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  /// The notification that was sent
  notification     Notification       @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  /// A unique ID for each chunk of notifications sent to Expo
  chunkUuid        String?            @db.Uuid
  /// The receipt ID from Expo (I *think* this is unique, but I'm not 100% sure)
  receiptId        String?            @unique
  /// Null by default, set to true once the notification has been sent to Expo
  sentAt           DateTime?          @db.Timestamptz(6)
  /// The time we checked the push receipt from Expo, remains null until the receipt is checked and is always set once it is
  ///
  /// This is set to the time that the receipt was checked, not necessarily the time the notification was actually delivered
  ///
  /// Furthermore, this is never set if we got an error from the push ticket down below
  receiptCheckedAt DateTime?          @db.Timestamptz(6)
  /// If set, either the push ticket or receipt indicated an error
  ///
  /// If it is null we assume the notification made it to the device and should be considered delivered
  deliveryError    NotificationError?
  createdAt        DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime           @updatedAt @db.Timestamptz(6)

  @@index([uuid])
}

model Marathon {
  id                   Int                    @id @default(autoincrement())
  uuid                 String                 @unique() @default(uuid()) @db.Uuid
  createdAt            DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime               @updatedAt @db.Timestamptz(6)
  year                 String                 @unique
  startDate            DateTime?              @db.Timestamptz(6)
  endDate              DateTime?              @db.Timestamptz(6)
  hours                MarathonHour[]
  teams                Team[]
  teamsWithTotalPoints TeamsWithTotalPoints[]
  dbFundsTeams         DBFundsTeam[]
  pointOpportunities   PointOpportunity[]

  @@index([uuid])
}

model MarathonHour {
  id              Int                    @id @default(autoincrement())
  uuid            String                 @unique() @default(uuid()) @db.Uuid
  marathon        Marathon               @relation(fields: [marathonId], references: [id], onDelete: Cascade)
  marathonId      Int
  maps            MarathonHourMapImage[]
  title           String
  details         String?
  shownStartingAt DateTime               @db.Timestamptz(6)
  durationInfo    String
  createdAt       DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime               @updatedAt @db.Timestamptz(6)

  @@index([uuid])
}

model MarathonHourMapImage {
  id             Int          @id @default(autoincrement())
  uuid           String       @unique() @default(uuid()) @db.Uuid
  marathonHour   MarathonHour @relation(fields: [marathonHourId], references: [id], onDelete: Cascade)
  marathonHourId Int
  image          Image        @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId        Int
  createdAt      DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime     @updatedAt @db.Timestamptz(6)

  @@index([uuid])
}

model FeedItem {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique() @default(uuid()) @db.Uuid
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)
  title       String
  textContent String?
  image       Image?   @relation(fields: [imageId], references: [id], onDelete: SetNull)
  imageId     Int?

  @@index([uuid])
}

model SolicitationCode {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  prefix    String
  code      Int
  name      String?

  dbFundsTeams DBFundsTeam[]
  ddns         DailyDepartmentNotification[]

  @@unique([prefix, code])
  @@index([uuid])
}

/// This table is kept in sync with the DBFunds API and should not be modified
model DBFundsTeam {
  /// Unrelated to the 'id' field in the DBFunds API
  id                 Int                       @id @default(autoincrement())
  uuid               String                    @unique @default(uuid()) @db.Uuid
  /// The team's DbNum from the DBFunds API is actually a solicitation code
  solicitationCodeId Int
  solicitationCode   SolicitationCode          @relation(fields: [solicitationCodeId], references: [id])
  /// The team's name from the DBFunds API
  name               String
  /// The team's total fundraising amount from the DBFunds API
  totalAmount        Float
  /// Whether the team is active in DBFunds
  active             Boolean
  /// All fundraising entries for the team
  fundraisingEntries DBFundsFundraisingEntry[]

  /// The marathon the team is associated with
  marathon   Marathon? @relation(fields: [marathonId], references: [id])
  marathonId Int?

  /// The corresponding teams in our database
  teams Team[]

  @@unique([solicitationCodeId, marathonId])
}

/// This table is kept in sync with the DBFunds API and should not be modified
model DBFundsFundraisingEntry {
  /// Unrelated to the 'id' field in the DBFunds API
  id            Int         @id @default(autoincrement())
  uuid          String      @unique @default(uuid()) @db.Uuid
  /// The amount of the entry
  amount        Decimal
  /// Who made the donation
  donatedBy     String?
  /// Who the donation was made for
  donatedTo     String?
  /// The date of the donation
  date          DateTime
  /// The team's DbNum from the DBFunds API
  dbFundsTeamId Int
  dbFundsTeam   DBFundsTeam @relation(fields: [dbFundsTeamId], references: [id], onDelete: Cascade)

  /// The corresponding fundraising entry in our database
  fundraisingEntry       FundraisingEntryWithMeta? @relation(fields: [fundraisingEntryId], references: [id])
  fundraisingEntrySource FundraisingEntrySource?
  fundraisingEntryId     Int?

  @@unique([donatedTo, donatedBy, date, dbFundsTeamId])
}

model FundraisingEntrySource {
  id Int @id @default(autoincrement())

  entryId       Int                      @unique
  entryWithMeta FundraisingEntryWithMeta @relation(fields: [entryId], references: [id], onDelete: Cascade)

  dbFundsEntryId Int?                     @unique
  dbFundsEntry   DBFundsFundraisingEntry? @relation(fields: [dbFundsEntryId], references: [id])

  ddnId Int?                         @unique
  ddn   DailyDepartmentNotification? @relation(fields: [ddnId], references: [id])
}

enum FundraisingEntryType {
  Cash
  Check
  Online
  Legacy
}

model FundraisingEntry {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique() @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  notes           String?
  type            FundraisingEntryType
  enteredBy       Int?
  enteredByPerson Person?              @relation(fields: [enteredBy], references: [id], onDelete: SetNull)
  entrySourceId   Int?                 @unique

  @@index([uuid])
}

view FundraisingEntryWithMeta {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  unassigned Decimal?

  notes           String?
  type            FundraisingEntryType
  enteredBy       Int?
  enteredByPerson Person?                 @relation(fields: [enteredBy], references: [id], onDelete: SetNull)
  entrySourceId   Int?                    @unique
  entrySource     FundraisingEntrySource?

  assignments             FundraisingAssignment[]
  dbFundsFundraisingEntry DBFundsFundraisingEntry[]

  @@index([uuid])
}

model FundraisingAssignment {
  id               Int                      @id @default(autoincrement())
  uuid             String                   @unique() @default(uuid()) @db.Uuid
  createdAt        DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime                 @updatedAt @db.Timestamptz(6)
  amount           Decimal
  personId         Int
  person           Person                   @relation(fields: [personId], references: [id], onDelete: Cascade)
  parentEntry      FundraisingEntryWithMeta @relation(fields: [fundraisingId], references: [id], onDelete: Cascade)
  fundraisingId    Int
  assignedBy       Int?
  assignedByPerson Person?                  @relation(fields: [assignedBy], references: [id], onDelete: SetNull, name: "fundraising_assignment_assigned_by_person")

  @@unique([fundraisingId, personId])
  @@index([uuid])
}

model JobState {
  jobName String   @id
  lastRun DateTime @db.Timestamptz(6)
}

model DailyDepartmentNotification {
  id Int @id @default(autoincrement())

  division                String?
  department              String?
  effectiveDate           DateTime?                        @db.Date
  processDate             DateTime?                        @db.Date
  pledgedDate             DateTime?                        @db.Date
  transactionDate         DateTime?                        @db.Date
  transactionType         String
  donor1Amount            Decimal?
  donor2Amount            Decimal?
  combinedAmount          Decimal
  pledgedAmount           Decimal
  accountNumber           String
  accountName             String
  holdingDestination      String?
  comment                 String?
  secShares               String?
  secType                 String?
  gikType                 String?
  gikDescription          String?
  onlineGift              Boolean
  solicitationCodeId      Int
  solicitationCode        SolicitationCode                 @relation(fields: [solicitationCodeId], references: [id])
  solicitation            String?
  behalfHonorMemorial     String?
  matchingGift            String?
  batchId                 String
  batch                   DailyDepartmentNotificationBatch @relation(fields: [batchId], references: [batchId], onDelete: Cascade, onUpdate: Cascade)
  ukFirstGift             Boolean
  divFirstGift            Boolean
  idSorter                String                           @unique
  combinedDonorName       String
  combinedDonorSalutation String
  combinedDonorSort       String?
  donor1Id                String?
  donor1GiftKey           String?
  donor1Name              String?
  donor1Deceased          Boolean?
  donor1Constituency      String?
  donor1TitleBar          String?
  donor1Pm                String?
  donor1Degrees           String?
  donor2Id                String?
  donor2GiftKey           String?
  donor2Name              String?
  donor2Deceased          Boolean?
  donor2Constituency      String?
  donor2TitleBar          String?
  donor2Pm                String?
  donor2Degrees           String?
  donor1Relation          String?
  donor2Relation          String?

  // For privacy reasons, the following fields are never actually stored in the database
  pLine1                   String?
  pLine2                   String?
  pLine3                   String?
  pCity                    String?
  pState                   String?
  pZip                     String?
  homePhone                String?
  homePhoneRestriction     String?
  businessPhone            String?
  businessPhoneRestriction String?
  email                    String?
  emailRestriction         String?

  transmittalSn String?
  sapDocNum     String?
  sapDocDate    DateTime? @db.Date
  jvDocNum      String?
  jvDocDate     DateTime? @db.Date
  advFeeCcPhil  String?
  advFeeAmtPhil Decimal?
  advFeeCcUnit  String?
  advFeeAmtUnit Decimal?
  advFeeStatus  String?
  hcUnit        String?

  fundraisingEntrySource FundraisingEntrySource?
}

model DailyDepartmentNotificationBatch {
  batchId    String                        @id
  batchType  BatchType
  memberDDNs DailyDepartmentNotification[]
}

enum BatchType {
  /// Check batches (C) include gifts to UK mailed directly to the Office of Development or to Gift Receiving, generally response to a phonathon solicitation
  Check
  /// Transmittal batches (T) include gifts to UK mailed directly to another department.
  Transmittal
  /// Credit Card batches (D) include credit card gifts approved by Gift Receiving office or Phonathon/Annual Giving, those made by a donor through the Office of Development online giving page, or by recurring subscription
  CreditCard
  /// ACH batches (A) include gifts set-up by the Gift Receiving office as a recurring subscription
  ACH
  /// Non-cash batches (N) include any gift to UK that is not received, processed or approved by the Gift Receiving office – gift was deposited by another department or gift-in-kind
  NonCash
  /// Payroll Deduction batches (X) include gifts from UK employees through bi-weekly or monthly payroll deductions
  PayrollDeduction
  /// Fallback batch type for when the batch type is unknown
  Unknown
}

/// Potential errors after sending a notification to Expo (see https://docs.expo.dev/push-notifications/sending-notifications/#individual-errors)
enum NotificationError {
  /// The device cannot receive push notifications anymore and you should stop sending messages to the corresponding Expo push token.
  DeviceNotRegistered
  /// Your push notification credentials for your standalone app are invalid (for example, you may have revoked them).
  InvalidCredentials
  /// The total notification payload was too large. On Android and iOS, the total payload must be at most 4096 bytes.
  MessageTooBig
  /// You are sending messages too frequently to the given device. Implement exponential backoff and slowly retry sending messages.
  MessageRateExceeded
  /// This indicates that there is an issue with your FCM push credentials.
  MismatchSenderId
  /// This is for any unknown errors that don't have a specific error code, this is not one of Expo's error codes.
  Unknown
}

enum MembershipPosition {
  Member
  Captain
}

enum CommitteeName {
  programmingCommittee
  fundraisingCommittee
  communityDevelopmentCommittee
  dancerRelationsCommittee
  familyRelationsCommittee
  techCommittee
  operationsCommittee
  marketingCommittee
  corporateCommittee
  miniMarathonsCommittee
  viceCommittee
  overallCommittee
}

enum CommitteeRole {
  Chair
  Coordinator
  Member
}

enum PointOpportunityType {
  Spirit
  Morale
  // TODO: Get rid of committee type
  Committee
}

enum TeamLegacyStatus {
  NewTeam
  ReturningTeam
  DemoTeam
}

enum TeamType {
  Spirit
  Morale
  // TODO: Get rid of committee type
  Committee
}

enum AuthSource {
  LinkBlue
  Anonymous
  Demo
}
