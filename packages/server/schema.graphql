# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""API response"""
interface AbstractGraphQLArrayOkResponse implements GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """Whether the operation was successful"""
  ok: Boolean!
}

"""API response"""
interface AbstractGraphQLCreatedResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """Whether the operation was successful"""
  ok: Boolean!

  """The UUID of the created resource"""
  uuid: String!
}

"""API response"""
interface AbstractGraphQLOkResponse implements GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """Whether the operation was successful"""
  ok: Boolean!
}

"""API response"""
interface AbstractGraphQLPaginatedResponse implements AbstractGraphQLArrayOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """Whether the operation was successful"""
  ok: Boolean!

  """The current page number (1-indexed)"""
  page: Float!

  """The number of items per page"""
  pageSize: Float!

  """The total number of items"""
  total: Float!
}

"""The source of authentication"""
enum AuthSource {
  Anonymous
  UkyLinkblue
}

"""Actions that the client MUST take if specified"""
enum ClientAction {
  LOGOUT
}

"""Roles within a committee"""
enum CommitteeRole {
  Chair
  Coordinator
  Member
}

type ConfigurationResource {
  createdAt: DateTimeISO
  key: String!
  updatedAt: DateTimeISO
}

input CreateConfigurationInput {
  key: String!
}

type CreateConfigurationResponse implements AbstractGraphQLCreatedResponse & AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: ConfigurationResource!

  """Whether the operation was successful"""
  ok: Boolean!

  """The UUID of the created resource"""
  uuid: String!
}

input CreateDeviceInput {
  """The UUID of the device"""
  deviceId: String!

  """The Expo push token of the device"""
  expoPushToken: String

  """The ID of the last user to log in on this device"""
  lastUserId: String
}

type CreateDeviceResponse implements AbstractGraphQLCreatedResponse & AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """The payload of the response"""
  data: DeviceResource!

  """Whether the operation was successful"""
  ok: Boolean!

  """The UUID of the created resource"""
  uuid: String!
}

input CreateEventInput {
  description: String!
  duration: Duration!
  location: String!
  name: String!
  start: DateTime!
}

type CreateEventResponse implements AbstractGraphQLCreatedResponse & AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: EventResource!

  """Whether the operation was successful"""
  ok: Boolean!

  """The UUID of the created resource"""
  uuid: String!
}

input CreateImageInput {
  alt: String
  height: Float!
  imageData: String
  mimeType: String!
  thumbHash: String
  url: String
  width: Float!
}

type CreateImageResponse implements AbstractGraphQLCreatedResponse & AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: ImageResource!

  """Whether the operation was successful"""
  ok: Boolean!

  """The UUID of the created resource"""
  uuid: String!
}

input CreatePersonInput {
  email: String!
}

type CreatePersonResponse implements AbstractGraphQLCreatedResponse & AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: PersonResource!

  """Whether the operation was successful"""
  ok: Boolean!

  """The UUID of the created resource"""
  uuid: String!
}

"""Luxon DateTime custom scalar type"""
scalar DateTime

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

"""DanceBlue roles"""
enum DbRole {
  Committee
  None
  Public
  TeamCaptain
  TeamMember
}

type DeleteConfigurationResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: Boolean!

  """Whether the operation was successful"""
  ok: Boolean!
}

type DeleteDeviceResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """The payload of the response"""
  data: Boolean!

  """Whether the operation was successful"""
  ok: Boolean!
}

type DeleteEventResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: Boolean!

  """Whether the operation was successful"""
  ok: Boolean!
}

type DeleteImageResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: Boolean!

  """Whether the operation was successful"""
  ok: Boolean!
}

type DeletePersonResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: Boolean!

  """Whether the operation was successful"""
  ok: Boolean!
}

enum DeviceResolverAllKeys {
  createdAt
  deviceId
  expoPushToken
  lastLogin
  updatedAt
}

enum DeviceResolverDateFilterKeys {
  createdAt
  lastLogin
  updatedAt
}

input DeviceResolverKeyedDateFilterItem {
  """The comparator to use for the filter"""
  comparison: NumericComparator!

  """The field to filter on"""
  field: DeviceResolverDateFilterKeys!

  """
  Should the comparator be negated? WARNING: This will throw if used on a comparator that does not support negation.
  """
  negate: Boolean = false

  """The value to filter by"""
  value: DateTime!
}

input DeviceResolverKeyedIsNullFilterItem {
  """The field to filter on"""
  field: DeviceResolverAllKeys!

  """
  Should the comparator be negated? WARNING: This will throw if used on a comparator that does not support negation.
  """
  negate: Boolean = false
}

input DeviceResolverKeyedOneOfFilterItem {
  """The field to filter on"""
  field: DeviceResolverStringFilterKeys!

  """
  Should the comparator be negated? WARNING: This will throw if used on a comparator that does not support negation.
  """
  negate: Boolean = false

  """The value to filter by"""
  value: [String!]!
}

input DeviceResolverKeyedStringFilterItem {
  """The comparator to use for the filter"""
  comparison: StringComparator!

  """The field to filter on"""
  field: DeviceResolverStringFilterKeys!

  """
  Should the comparator be negated? WARNING: This will throw if used on a comparator that does not support negation.
  """
  negate: Boolean = false

  """The value to filter by"""
  value: String!
}

enum DeviceResolverStringFilterKeys {
  deviceId
  expoPushToken
}

type DeviceResource {
  createdAt: DateTimeISO
  deviceId: ID!
  expoPushToken: String
  lastLogin: DateTime
  lastUser: PersonResource
  updatedAt: DateTimeISO
}

"""Luxon Duration custom scalar type"""
scalar Duration

enum EventResolverAllKeys {
  createdAt
  description
  duration
  location
  occurrence
  summary
  title
  updatedAt
}

enum EventResolverDateFilterKeys {
  createdAt
  occurrence
  updatedAt
}

input EventResolverKeyedDateFilterItem {
  """The comparator to use for the filter"""
  comparison: NumericComparator!

  """The field to filter on"""
  field: EventResolverDateFilterKeys!

  """
  Should the comparator be negated? WARNING: This will throw if used on a comparator that does not support negation.
  """
  negate: Boolean = false

  """The value to filter by"""
  value: DateTime!
}

input EventResolverKeyedIsNullFilterItem {
  """The field to filter on"""
  field: EventResolverAllKeys!

  """
  Should the comparator be negated? WARNING: This will throw if used on a comparator that does not support negation.
  """
  negate: Boolean = false
}

input EventResolverKeyedNumericFilterItem {
  """The comparator to use for the filter"""
  comparison: NumericComparator!

  """The field to filter on"""
  field: EventResolverNumericFilterKeys!

  """
  Should the comparator be negated? WARNING: This will throw if used on a comparator that does not support negation.
  """
  negate: Boolean = false

  """The value to filter by"""
  value: Float!
}

input EventResolverKeyedOneOfFilterItem {
  """The field to filter on"""
  field: EventResolverStringFilterKeys!

  """
  Should the comparator be negated? WARNING: This will throw if used on a comparator that does not support negation.
  """
  negate: Boolean = false

  """The value to filter by"""
  value: [String!]!
}

input EventResolverKeyedStringFilterItem {
  """The comparator to use for the filter"""
  comparison: StringComparator!

  """The field to filter on"""
  field: EventResolverStringFilterKeys!

  """
  Should the comparator be negated? WARNING: This will throw if used on a comparator that does not support negation.
  """
  negate: Boolean = false

  """The value to filter by"""
  value: String!
}

enum EventResolverNumericFilterKeys {
  duration
}

enum EventResolverStringFilterKeys {
  description
  location
  summary
  title
}

type EventResource {
  createdAt: DateTimeISO
  description: String
  duration: Duration
  eventId: ID!
  images: [ImageResource!]
  location: String
  occurrences: [DateTime!]!
  summary: String
  title: String!
  updatedAt: DateTimeISO
}

type GetAllConfigurationsResponse implements AbstractGraphQLArrayOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: ConfigurationResource!

  """Whether the operation was successful"""
  ok: Boolean!
}

type GetConfigurationByUuidResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: ConfigurationResource!

  """Whether the operation was successful"""
  ok: Boolean!
}

type GetDeviceByUuidResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """The payload of the response"""
  data: DeviceResource!

  """Whether the operation was successful"""
  ok: Boolean!
}

type GetEventByUuidResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: EventResource!

  """Whether the operation was successful"""
  ok: Boolean!
}

type GetImageByUuidResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: ImageResource!

  """Whether the operation was successful"""
  ok: Boolean!
}

type GetPersonByUuidResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: PersonResource!

  """Whether the operation was successful"""
  ok: Boolean!
}

type GetThumbHashByUuidResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: String!

  """Whether the operation was successful"""
  ok: Boolean!
}

"""API response"""
interface GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """Whether the operation was successful"""
  ok: Boolean!
}

type ImageResource {
  alt: String
  createdAt: DateTimeISO
  height: Int!
  imageData: String
  imageId: ID!
  mimeType: String!
  thumbHash: String
  updatedAt: DateTimeISO
  url: URL
  width: Int!
}

type ListDevicesResponse implements AbstractGraphQLArrayOkResponse & AbstractGraphQLPaginatedResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """The payload of the response"""
  data: [DeviceResource!]!

  """Whether the operation was successful"""
  ok: Boolean!

  """The current page number (1-indexed)"""
  page: Float!

  """The number of items per page"""
  pageSize: Float!

  """The total number of items"""
  total: Float!
}

type ListEventsResponse implements AbstractGraphQLArrayOkResponse & AbstractGraphQLPaginatedResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: [EventResource!]!

  """Whether the operation was successful"""
  ok: Boolean!

  """The current page number (1-indexed)"""
  page: Float!

  """The number of items per page"""
  pageSize: Float!

  """The total number of items"""
  total: Float!
}

type Mutation {
  createConfiguration(input: CreateConfigurationInput!): CreateConfigurationResponse!
  createDevice(input: CreateDeviceInput!): CreateDeviceResponse!
  createEvent(input: CreateEventInput!): CreateEventResponse!
  createImage(input: CreateImageInput!): CreateImageResponse!
  createPerson(input: CreatePersonInput!): CreatePersonResponse!
  deleteConfiguration(id: String!): DeleteConfigurationResponse!
  deleteDevice(id: String!): DeleteDeviceResponse!
  deleteEvent(id: String!): DeleteEventResponse!
  deleteImage(id: String!): DeleteImageResponse!
  deletePerson(id: String!): DeletePersonResponse!
  setConfiguration(id: String!, input: SetConfigurationInput!): SetConfigurationResponse!
}

enum NumericComparator {
  EQUALS
  GREATER_THAN
  GREATER_THAN_OR_EQUAL_TO
  IS
  LESS_THAN
  LESS_THAN_OR_EQUAL_TO
}

type PersonResource {
  authIds: AuthSource!
  captainOf: [TeamResource!]!
  createdAt: DateTimeISO
  email: String!
  firstName: String
  lastName: String
  linkblue: String
  memberOf: [TeamResource!]!
  personId: ID!
  role: RoleResource!
  updatedAt: DateTimeISO
}

type Query {
  getAllConfigurations: GetAllConfigurationsResponse!
  getConfigurationByUuid(uuid: String!): GetConfigurationByUuidResponse!
  getDeviceByUuid(uuid: String!): GetDeviceByUuidResponse!
  getEventByUuid(uuid: String!): GetEventByUuidResponse!
  getImageByUuid(uuid: String!): GetImageByUuidResponse!
  getPersonByUuid(uuid: String!): GetPersonByUuidResponse!
  getThumbHashByUuid(uuid: String!): GetThumbHashByUuidResponse
  listDevices(
    """The boolean filters to apply to the query"""
    booleanFilters: Void

    """The date filters to apply to the query"""
    dateFilters: [DeviceResolverKeyedDateFilterItem!]

    """The is-null filters to apply to the query"""
    isNullFilters: [DeviceResolverKeyedIsNullFilterItem!]

    """The numeric filters to apply to the query"""
    numericFilters: Void

    """The one-of filters to apply to the query"""
    oneOfFilters: [DeviceResolverKeyedOneOfFilterItem!]

    """The page number to return, defaults to 0"""
    page: Float

    """The number of items to return per page, defaults to 10"""
    pageSize: Float

    """
    The fields to sort by, in order of priority. If unspecified, the sort order is undefined
    """
    sortBy: [String!]

    """
    The direction to sort, if not specified will default to ascending, the order of the values in this array should match the order of the values in the sortBy array, if only one value is specified it will be used for all sortBy values, otherwise the lengths must match
    """
    sortDirection: [SortDirection!]

    """The string filters to apply to the query"""
    stringFilters: [DeviceResolverKeyedStringFilterItem!]
  ): ListDevicesResponse!
  listEvents(
    """The boolean filters to apply to the query"""
    booleanFilters: Void

    """The date filters to apply to the query"""
    dateFilters: [EventResolverKeyedDateFilterItem!]

    """The is-null filters to apply to the query"""
    isNullFilters: [EventResolverKeyedIsNullFilterItem!]

    """The numeric filters to apply to the query"""
    numericFilters: [EventResolverKeyedNumericFilterItem!]

    """The one-of filters to apply to the query"""
    oneOfFilters: [EventResolverKeyedOneOfFilterItem!]

    """The page number to return, defaults to 0"""
    page: Float

    """The number of items to return per page, defaults to 10"""
    pageSize: Float

    """
    The fields to sort by, in order of priority. If unspecified, the sort order is undefined
    """
    sortBy: [String!]

    """
    The direction to sort, if not specified will default to ascending, the order of the values in this array should match the order of the values in the sortBy array, if only one value is specified it will be used for all sortBy values, otherwise the lengths must match
    """
    sortDirection: [SortDirection!]

    """The string filters to apply to the query"""
    stringFilters: [EventResolverKeyedStringFilterItem!]
  ): ListEventsResponse!
}

type RoleResource {
  committee: String
  committeeRole: CommitteeRole
  createdAt: DateTimeISO
  dbRole: DbRole!
  updatedAt: DateTimeISO
}

input SetConfigurationInput {
  key: String!
}

type SetConfigurationResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: ConfigurationResource!

  """Whether the operation was successful"""
  ok: Boolean!
}

enum SortDirection {
  ASCENDING
  DESCENDING
}

enum StringComparator {
  ENDS_WITH
  EQUALS
  IS
  LIKE
  REGEX
  STARTS_WITH
  SUBSTRING
}

type TeamResource {
  captains: [String!]!
  createdAt: DateTimeISO
  members: [String!]!
  name: String!
  pointEntries: [String!]!
  teamId: ID!
  type: TeamType!
  updatedAt: DateTimeISO
  visibility: DbRole!
}

"""Types of teams"""
enum TeamType {
  Morale
  Spirit
}

"""URL custom scalar type"""
scalar URL

"""Void custom scalar type"""
scalar Void
