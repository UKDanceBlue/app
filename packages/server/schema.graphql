# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""
API response
"""
interface AbstractGraphQLArrayOkResponse implements GraphQLBaseResponse {
  """
  Client actions to perform
  """
  clientActions: [ClientAction!]

  """
  Whether the operation was successful
  """
  ok: Boolean!
}

"""
API response
"""
interface AbstractGraphQLCreatedResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """
  Client actions to perform
  """
  clientActions: [ClientAction!]

  """
  Whether the operation was successful
  """
  ok: Boolean!

  """
  The UUID of the created resource
  """
  uuid: String!
}

"""
API response
"""
interface AbstractGraphQLOkResponse implements GraphQLBaseResponse {
  """
  Client actions to perform
  """
  clientActions: [ClientAction!]

  """
  Whether the operation was successful
  """
  ok: Boolean!
}

"""
API response
"""
interface AbstractGraphQLPaginatedResponse implements AbstractGraphQLArrayOkResponse & GraphQLBaseResponse {
  """
  Client actions to perform
  """
  clientActions: [ClientAction!]

  """
  Whether the operation was successful
  """
  ok: Boolean!

  """
  The current page number (1-indexed)
  """
  page: Float!

  """
  The number of items per page
  """
  pageSize: Float!

  """
  The total number of items
  """
  total: Float!
}

"""
The source of authentication
"""
enum AuthSource {
  Anonymous
  UkyLinkblue
}

"""
Actions that the client MUST take if specified
"""
enum ClientAction {
  LOGOUT
}

"""
Roles within a committee
"""
enum CommitteeRole {
  Chair
  Coordinator
  Member
}

type ConfigurationResource {
  key: String!
}

input CreateConfigurationInput {
  key: String!
}

type CreateConfigurationResponse implements AbstractGraphQLCreatedResponse & AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """
  Client actions to perform
  """
  clientActions: [ClientAction!]
  data: ConfigurationResource!

  """
  Whether the operation was successful
  """
  ok: Boolean!

  """
  The UUID of the created resource
  """
  uuid: String!
}

input CreateDeviceInput {
  """
  The UUID of the device
  """
  deviceId: String!

  """
  The Expo push token of the device
  """
  expoPushToken: String

  """
  The ID of the last user to log in on this device
  """
  lastUserId: String
}

type CreateDeviceResponse implements AbstractGraphQLCreatedResponse & AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """
  Client actions to perform
  """
  clientActions: [ClientAction!]

  """
  The payload of the response
  """
  data: DeviceResource!

  """
  Whether the operation was successful
  """
  ok: Boolean!

  """
  The UUID of the created resource
  """
  uuid: String!
}

input CreateEventInput {
  description: String!
  duration: Duration!
  location: String!
  name: String!
  start: DateTime!
}

type CreateEventResponse implements AbstractGraphQLCreatedResponse & AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """
  Client actions to perform
  """
  clientActions: [ClientAction!]
  data: EventResource!

  """
  Whether the operation was successful
  """
  ok: Boolean!

  """
  The UUID of the created resource
  """
  uuid: String!
}

input CreateImageInput {
  alt: String
  height: Float!
  imageData: String
  mimeType: String!
  thumbHash: String
  url: String
  width: Float!
}

type CreateImageResponse implements AbstractGraphQLCreatedResponse & AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """
  Client actions to perform
  """
  clientActions: [ClientAction!]
  data: ImageResource!

  """
  Whether the operation was successful
  """
  ok: Boolean!

  """
  The UUID of the created resource
  """
  uuid: String!
}

input CreatePersonInput {
  email: String!
}

type CreatePersonResponse implements AbstractGraphQLCreatedResponse & AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """
  Client actions to perform
  """
  clientActions: [ClientAction!]
  data: PersonResource!

  """
  Whether the operation was successful
  """
  ok: Boolean!

  """
  The UUID of the created resource
  """
  uuid: String!
}

input DateFilterItem {
  """
  The comparator to use for the filter
  """
  comparison: NumericComparator!

  """
  The value to filter by
  """
  value: DateTime!
}

"""
Luxon DateTime custom scalar type
"""
scalar DateTime

"""
DanceBlue roles
"""
enum DbRole {
  Committee
  None
  Public
  TeamCaptain
  TeamMember
}

type DeleteConfigurationResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """
  Client actions to perform
  """
  clientActions: [ClientAction!]
  data: Boolean!

  """
  Whether the operation was successful
  """
  ok: Boolean!
}

type DeleteDeviceResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """
  Client actions to perform
  """
  clientActions: [ClientAction!]

  """
  The payload of the response
  """
  data: Boolean!

  """
  Whether the operation was successful
  """
  ok: Boolean!
}

type DeleteEventResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """
  Client actions to perform
  """
  clientActions: [ClientAction!]
  data: Boolean!

  """
  Whether the operation was successful
  """
  ok: Boolean!
}

type DeleteImageResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """
  Client actions to perform
  """
  clientActions: [ClientAction!]
  data: Boolean!

  """
  Whether the operation was successful
  """
  ok: Boolean!
}

type DeletePersonResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """
  Client actions to perform
  """
  clientActions: [ClientAction!]
  data: Boolean!

  """
  Whether the operation was successful
  """
  ok: Boolean!
}

type DeviceResource {
  deviceId: ID!
  expoPushToken: String
  lastLogin: DateTime
  lastUser: PersonResource
}

"""
Luxon Duration custom scalar type
"""
scalar Duration

type EventResource {
  description: String
  duration: Duration
  eventId: ID!
  images: [ImageResource!]
  location: String
  occurrences: [DateTime!]!
  summary: String
  title: String!
}

type GetAllConfigurationsResponse implements AbstractGraphQLArrayOkResponse & GraphQLBaseResponse {
  """
  Client actions to perform
  """
  clientActions: [ClientAction!]
  data: ConfigurationResource!

  """
  Whether the operation was successful
  """
  ok: Boolean!
}

type GetConfigurationByUuidResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """
  Client actions to perform
  """
  clientActions: [ClientAction!]
  data: ConfigurationResource!

  """
  Whether the operation was successful
  """
  ok: Boolean!
}

type GetDeviceByUuidResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """
  Client actions to perform
  """
  clientActions: [ClientAction!]

  """
  The payload of the response
  """
  data: DeviceResource!

  """
  Whether the operation was successful
  """
  ok: Boolean!
}

type GetEventByUuidResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """
  Client actions to perform
  """
  clientActions: [ClientAction!]
  data: EventResource!

  """
  Whether the operation was successful
  """
  ok: Boolean!
}

type GetImageByUuidResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """
  Client actions to perform
  """
  clientActions: [ClientAction!]
  data: ImageResource!

  """
  Whether the operation was successful
  """
  ok: Boolean!
}

type GetPersonByUuidResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """
  Client actions to perform
  """
  clientActions: [ClientAction!]
  data: PersonResource!

  """
  Whether the operation was successful
  """
  ok: Boolean!
}

type GetThumbHashByUuidResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """
  Client actions to perform
  """
  clientActions: [ClientAction!]
  data: String!

  """
  Whether the operation was successful
  """
  ok: Boolean!
}

"""
API response
"""
interface GraphQLBaseResponse {
  """
  Client actions to perform
  """
  clientActions: [ClientAction!]

  """
  Whether the operation was successful
  """
  ok: Boolean!
}

type ImageResource {
  alt: String
  height: Int!
  imageData: String
  imageId: ID!
  mimeType: String!
  thumbHash: String
  url: URL
  width: Int!
}

type ListDevicesResponse implements AbstractGraphQLArrayOkResponse & AbstractGraphQLPaginatedResponse & GraphQLBaseResponse {
  """
  Client actions to perform
  """
  clientActions: [ClientAction!]

  """
  The payload of the response
  """
  data: [DeviceResource!]!

  """
  Whether the operation was successful
  """
  ok: Boolean!

  """
  The current page number (1-indexed)
  """
  page: Float!

  """
  The number of items per page
  """
  pageSize: Float!

  """
  The total number of items
  """
  total: Float!
}

input ListQueryArgs {
  expoPushToken: StringFilterItem
  lastLogin: DateFilterItem
  lastUserId: StringFilterItem
}

type Mutation {
  createConfiguration(
    input: CreateConfigurationInput!
  ): CreateConfigurationResponse!
  createDevice(input: CreateDeviceInput!): CreateDeviceResponse!
  createEvent(input: CreateEventInput!): CreateEventResponse!
  createImage(input: CreateImageInput!): CreateImageResponse!
  createPerson(input: CreatePersonInput!): CreatePersonResponse!
  deleteConfiguration(id: String!): DeleteConfigurationResponse!
  deleteDevice(id: String!): DeleteDeviceResponse!
  deleteEvent(id: String!): DeleteEventResponse!
  deleteImage(id: String!): DeleteImageResponse!
  deletePerson(id: String!): DeletePersonResponse!
  setConfiguration(
    id: String!
    input: SetConfigurationInput!
  ): SetConfigurationResponse!
}

enum NumericComparator {
  EQUALS
  GREATER_THAN
  GREATER_THAN_OR_EQUAL_TO
  LESS_THAN
  LESS_THAN_OR_EQUAL_TO
}

type PersonResource {
  authIds: AuthSource!
  captainOf: [TeamResource!]!
  email: String!
  firstName: String
  lastName: String
  linkblue: String
  memberOf: [TeamResource!]!
  personId: ID!
  role: RoleResource!
}

type Query {
  getAllConfigurations: GetAllConfigurationsResponse!
  getConfigurationByUuid(uuid: String!): GetConfigurationByUuidResponse!
  getDeviceByUuid(uuid: String!): GetDeviceByUuidResponse!
  getEventByUuid(uuid: String!): GetEventByUuidResponse!
  getImageByUuid(uuid: String!): GetImageByUuidResponse!
  getPersonByUuid(uuid: String!): GetPersonByUuidResponse!
  getThumbHashByUuid(uuid: String!): GetThumbHashByUuidResponse
  listDevices(query: ListQueryArgs!): ListDevicesResponse!
}

type RoleResource {
  committee: String
  committeeRole: CommitteeRole
  dbRole: DbRole!
}

input SetConfigurationInput {
  key: String!
}

type SetConfigurationResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """
  Client actions to perform
  """
  clientActions: [ClientAction!]
  data: ConfigurationResource!

  """
  Whether the operation was successful
  """
  ok: Boolean!
}

enum StringComparator {
  EQUALS
  INCLUDES
}

input StringFilterItem {
  """
  The comparator to use for the filter
  """
  comparison: StringComparator!

  """
  The value to filter by
  """
  value: String!
}

type TeamResource {
  captains: [String!]!
  members: [String!]!
  name: String!
  pointEntries: [String!]!
  teamId: ID!
  type: TeamType!
  visibility: DbRole!
}

"""
Types of teams
"""
enum TeamType {
  Morale
  Spirit
}

"""
URL custom scalar type
"""
scalar URL
