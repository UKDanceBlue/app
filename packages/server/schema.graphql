# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""API response"""
interface AbstractGraphQLArrayOkResponse implements GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """Whether the operation was successful"""
  ok: Boolean!
}

"""API response"""
interface AbstractGraphQLCreatedResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """Whether the operation was successful"""
  ok: Boolean!
}

"""API response"""
interface AbstractGraphQLOkResponse implements GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """Whether the operation was successful"""
  ok: Boolean!
}

"""The source of authentication"""
enum AuthSource {
  Anonymous
  UkyLinkblue
}

"""Actions that the client MUST take if specified"""
enum ClientAction {
  LOGOUT
}

"""Roles within a committee"""
enum CommitteeRole {
  Chair
  Coordinator
  Member
}

type ConfigurationResource {
  key: String!
}

input CreateConfigurationInput {
  key: String!
}

"""API response"""
type CreateConfigurationResponse implements AbstractGraphQLCreatedResponse & AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """The payload of the response"""
  data: ConfigurationResource

  """Whether the operation was successful"""
  ok: Boolean!

  """The UUID of the created resource"""
  uuid: String!
}

union CreateConfigurationResponseOrError = CreateConfigurationResponse | GraphQLErrorResponse

input CreateDeviceInput {
  deviceId: String!
}

"""API response"""
type CreateDeviceResponse implements AbstractGraphQLCreatedResponse & AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """The payload of the response"""
  data: DeviceResource

  """Whether the operation was successful"""
  ok: Boolean!

  """The UUID of the created resource"""
  uuid: String!
}

union CreateDeviceResponseOrError = CreateDeviceResponse | GraphQLErrorResponse

input CreateEventInput {
  description: String!
  duration: Duration!
  location: String!
  name: String!
  start: DateTime!
}

"""API response"""
type CreateEventResponse implements AbstractGraphQLCreatedResponse & AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """The payload of the response"""
  data: EventResource

  """Whether the operation was successful"""
  ok: Boolean!

  """The UUID of the created resource"""
  uuid: String!
}

union CreateEventResponseOrError = CreateEventResponse | GraphQLErrorResponse

input CreateImageInput {
  alt: String
  height: Float!
  imageData: String
  mimeType: String!
  thumbHash: String
  url: String
  width: Float!
}

"""API response"""
type CreateImageResponse implements AbstractGraphQLCreatedResponse & AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """The payload of the response"""
  data: ImageResource

  """Whether the operation was successful"""
  ok: Boolean!

  """The UUID of the created resource"""
  uuid: String!
}

union CreateImageResponseOrError = CreateImageResponse | GraphQLErrorResponse

input CreatePersonInput {
  email: String!
}

"""API response"""
type CreatePersonResponse implements AbstractGraphQLCreatedResponse & AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """The payload of the response"""
  data: PersonResource

  """Whether the operation was successful"""
  ok: Boolean!

  """The UUID of the created resource"""
  uuid: String!
}

union CreatePersonResponseOrError = CreatePersonResponse | GraphQLErrorResponse

"""Luxon DateTime custom scalar type"""
scalar DateTime

"""DanceBlue roles"""
enum DbRole {
  Committee
  None
  Public
  TeamCaptain
  TeamMember
}

"""API response"""
type DeleteConfigurationResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """The payload of the response"""
  data: Boolean

  """Whether the operation was successful"""
  ok: Boolean!
}

union DeleteConfigurationResponseOrError = DeleteConfigurationResponse | GraphQLErrorResponse

"""API response"""
type DeleteDeviceResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """The payload of the response"""
  data: Boolean

  """Whether the operation was successful"""
  ok: Boolean!
}

union DeleteDeviceResponseOrError = DeleteDeviceResponse | GraphQLErrorResponse

"""API response"""
type DeleteEventResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """The payload of the response"""
  data: Boolean

  """Whether the operation was successful"""
  ok: Boolean!
}

union DeleteEventResponseOrError = DeleteEventResponse | GraphQLErrorResponse

"""API response"""
type DeleteImageResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """The payload of the response"""
  data: Boolean

  """Whether the operation was successful"""
  ok: Boolean!
}

union DeleteImageResponseOrError = DeleteImageResponse | GraphQLErrorResponse

"""API response"""
type DeletePersonResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """The payload of the response"""
  data: Boolean

  """Whether the operation was successful"""
  ok: Boolean!
}

union DeletePersonResponseOrError = DeletePersonResponse | GraphQLErrorResponse

type DeviceResource {
  deviceId: ID!
  expoPushToken: String
  lastLogin: DateTime
  lastUser: PersonResource
}

"""Luxon Duration custom scalar type"""
scalar Duration

"""Error codes"""
enum ErrorCode {
  InternalFailure
  InvalidRequest
  MissingRequiredInput
  NotFound
  NotLoggedIn
  Unauthorized
  Unknown
}

type EventResource {
  description: String
  duration: Duration
  eventId: ID!
  images: [ImageResource!]
  location: String
  occurrences: [DateTime!]!
  summary: String
  title: String!
}

"""API response"""
type GetAllConfigurationsResponse implements AbstractGraphQLArrayOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """The payload of the response"""
  data: [ConfigurationResource!]

  """Whether the operation was successful"""
  ok: Boolean!
}

union GetAllConfigurationsResponseOrError = GetAllConfigurationsResponse | GraphQLErrorResponse

"""API response"""
type GetConfigurationByUuidResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """The payload of the response"""
  data: ConfigurationResource

  """Whether the operation was successful"""
  ok: Boolean!
}

union GetConfigurationByUuidResponseOrError = GetConfigurationByUuidResponse | GraphQLErrorResponse

"""API response"""
type GetDeviceByUuidResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """The payload of the response"""
  data: DeviceResource

  """Whether the operation was successful"""
  ok: Boolean!
}

union GetDeviceByUuidResponseOrError = GetDeviceByUuidResponse | GraphQLErrorResponse

"""API response"""
type GetEventByUuidResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """The payload of the response"""
  data: EventResource

  """Whether the operation was successful"""
  ok: Boolean!
}

union GetEventByUuidResponseOrError = GetEventByUuidResponse | GraphQLErrorResponse

"""API response"""
type GetImageByUuidResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """The payload of the response"""
  data: ImageResource

  """Whether the operation was successful"""
  ok: Boolean!
}

union GetImageByUuidResponseOrError = GetImageByUuidResponse | GraphQLErrorResponse

"""API response"""
type GetPersonByUuidResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """The payload of the response"""
  data: PersonResource

  """Whether the operation was successful"""
  ok: Boolean!
}

union GetPersonByUuidResponseOrError = GetPersonByUuidResponse | GraphQLErrorResponse

"""API response"""
type GetThumbHashByUuidResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """The payload of the response"""
  data: String

  """Whether the operation was successful"""
  ok: Boolean!
}

union GetThumbHashByUuidResponseOrError = GetThumbHashByUuidResponse | GraphQLErrorResponse

"""API response"""
interface GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """Whether the operation was successful"""
  ok: Boolean!
}

"""API response"""
type GraphQLErrorResponse implements GraphQLBaseResponse {
  """Cause of the error, if any. May contain sensitive information"""
  cause: String

  """Client actions to perform"""
  clientActions: [ClientAction!]

  """Error details, explains the problem, but not for end users"""
  details: String

  """The error code"""
  errorCode: ErrorCode!

  """Error explanation, can be shown to end users"""
  explanation: String

  """The error message"""
  message: String!

  """Whether the operation was successful"""
  ok: Boolean!
}

type ImageResource {
  alt: String
  height: Int!
  imageData: String
  imageId: ID!
  mimeType: String!
  thumbHash: String
  url: URL
  width: Int!
}

type Mutation {
  create(input: CreatePersonInput!): CreatePersonResponseOrError!
  createConfiguration(input: CreateConfigurationInput!): CreateConfigurationResponseOrError!
  createDevice(input: CreateDeviceInput!): CreateDeviceResponseOrError!
  createEvent(input: CreateEventInput!): CreateEventResponseOrError!
  createImage(input: CreateImageInput!): CreateImageResponseOrError!
  delete(id: String!): DeletePersonResponseOrError!
  deleteConfiguration(id: String!): DeleteConfigurationResponseOrError!
  deleteDevice(id: String!): DeleteDeviceResponseOrError!
  deleteEvent(id: String!): DeleteEventResponseOrError!
  deleteImage(id: String!): DeleteImageResponseOrError!
  setConfiguration(id: String!, input: SetConfigurationInput!): SetConfigurationResponseOrError!
}

type PersonResource {
  authIds: AuthSource!
  captainOf: [TeamResource!]!
  email: String!
  firstName: String
  lastName: String
  linkblue: String
  memberOf: [TeamResource!]!
  personId: ID!
  role: RoleResource!
}

type Query {
  getAllConfigurations: GetAllConfigurationsResponseOrError!
  getConfigurationByUuid(uuid: String!): GetConfigurationByUuidResponseOrError!
  getDeviceByUuid(uuid: String!): GetDeviceByUuidResponseOrError!
  getEventByUuid(uuid: String!): GetEventByUuidResponseOrError!
  getImageByUuid(uuid: String!): GetImageByUuidResponseOrError!
  getPersonByUuid(uuid: String!): GetPersonByUuidResponseOrError!
  getThumbHashByUuid(uuid: String!): GetThumbHashByUuidResponseOrError
}

type RoleResource {
  committee: String
  committeeRole: CommitteeRole
  dbRole: DbRole!
}

input SetConfigurationInput {
  key: String!
}

"""API response"""
type SetConfigurationResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """The payload of the response"""
  data: ConfigurationResource

  """Whether the operation was successful"""
  ok: Boolean!
}

union SetConfigurationResponseOrError = GraphQLErrorResponse | SetConfigurationResponse

type TeamResource {
  captains: [String!]!
  members: [String!]!
  name: String!
  pointEntries: [String!]!
  teamId: ID!
  type: TeamType!
  visibility: DbRole!
}

"""Types of teams"""
enum TeamType {
  Morale
  Spirit
}

"""URL custom scalar type"""
scalar URL