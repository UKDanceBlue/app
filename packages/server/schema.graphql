# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""API response"""
interface AbstractGraphQLArrayOkResponse implements GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """Whether the operation was successful"""
  ok: Boolean!
}

"""API response"""
interface AbstractGraphQLCreatedResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """Whether the operation was successful"""
  ok: Boolean!
  uuid: String!
}

"""API response"""
interface AbstractGraphQLOkResponse implements GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """Whether the operation was successful"""
  ok: Boolean!
}

"""API response"""
interface AbstractGraphQLPaginatedResponse implements AbstractGraphQLArrayOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """Whether the operation was successful"""
  ok: Boolean!

  """The current page number (1-indexed)"""
  page: PositiveInt!

  """The number of items per page"""
  pageSize: NonNegativeInt!

  """The total number of items"""
  total: NonNegativeInt!
}

input AddEventImageInput {
  alt: String
  height: Int!
  imageData: String
  mimeType: String!
  thumbHash: String
  url: String
  width: Int!
}

type AddEventImageResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: ImageResource!

  """Whether the operation was successful"""
  ok: Boolean!
}

type AuthIdList {
  source: AuthSource!
  value: String!
}

"""The source of authentication"""
enum AuthSource {
  Anonymous
  UkyLinkblue
}

"""Actions that the client MUST take if specified"""
enum ClientAction {
  LOGOUT
}

"""Roles within a committee"""
enum CommitteeRole {
  Chair
  Coordinator
  Member
}

type ConfigurationResource {
  createdAt: DateTimeISO
  key: String!
  updatedAt: DateTimeISO
}

input CreateConfigurationInput {
  key: String!
}

type CreateConfigurationResponse implements AbstractGraphQLCreatedResponse & AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: ConfigurationResource!

  """Whether the operation was successful"""
  ok: Boolean!
  uuid: String!
}

input CreateDeviceInput {
  deviceId: String!

  """The Expo push token of the device"""
  expoPushToken: String

  """The ID of the last user to log in on this device"""
  lastUserId: String
}

type CreateDeviceResponse implements AbstractGraphQLCreatedResponse & AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: DeviceResource!

  """Whether the operation was successful"""
  ok: Boolean!
  uuid: String!
}

input CreateEventInput {
  description: String
  location: String
  occurrences: [CreateEventOccurrenceInput!]!
  summary: String
  title: String!
}

input CreateEventOccurrenceInput {
  fullDay: Boolean!
  interval: LuxonDateRange!
}

type CreateEventResponse implements AbstractGraphQLCreatedResponse & AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: EventResource!

  """Whether the operation was successful"""
  ok: Boolean!
  uuid: String!
}

input CreateImageInput {
  alt: String
  height: NonNegativeInt!
  imageData: String
  mimeType: String!
  thumbHash: String
  url: String
  width: NonNegativeInt!
}

type CreateImageResponse implements AbstractGraphQLCreatedResponse & AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: ImageResource!

  """Whether the operation was successful"""
  ok: Boolean!
  uuid: String!
}

input CreatePersonInput {
  email: String!
}

type CreatePersonResponse implements AbstractGraphQLCreatedResponse & AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: PersonResource!

  """Whether the operation was successful"""
  ok: Boolean!
  uuid: String!
}

input CreateTeamInput {
  legacyStatus: TeamLegacyStatus!
  marathonYear: String!
  name: String!
  persistentIdentifier: String!
  type: TeamType!
  uuid: ID!
  visibility: String!
}

type CreateTeamResponse implements AbstractGraphQLCreatedResponse & AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: TeamResource!

  """Whether the operation was successful"""
  ok: Boolean!
  uuid: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

"""DanceBlue roles"""
enum DbRole {
  Committee
  None
  Public
  TeamCaptain
  TeamMember
}

type DeleteConfigurationResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: Boolean!

  """Whether the operation was successful"""
  ok: Boolean!
}

type DeleteDeviceResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: Boolean!

  """Whether the operation was successful"""
  ok: Boolean!
}

type DeleteEventResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: Boolean!

  """Whether the operation was successful"""
  ok: Boolean!
}

type DeleteImageResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: Boolean!

  """Whether the operation was successful"""
  ok: Boolean!
}

type DeleteNotificationResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: Boolean!

  """Whether the operation was successful"""
  ok: Boolean!
}

type DeletePersonResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: Boolean!

  """Whether the operation was successful"""
  ok: Boolean!
}

type DeleteTeamResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: Boolean!

  """Whether the operation was successful"""
  ok: Boolean!
}

enum DeviceResolverAllKeys {
  createdAt
  deviceId
  expoPushToken
  lastLogin
  updatedAt
}

enum DeviceResolverDateFilterKeys {
  createdAt
  lastLogin
  updatedAt
}

input DeviceResolverKeyedDateFilterItem {
  """The comparator to use for the filter"""
  comparison: NumericComparator!

  """The field to filter on"""
  field: DeviceResolverDateFilterKeys!

  """
  Should the comparator be negated? WARNING: This will throw if used on a comparator that does not support negation.
  """
  negate: Boolean = false
  value: LuxonDateTime!
}

input DeviceResolverKeyedIsNullFilterItem {
  """The field to filter on"""
  field: DeviceResolverAllKeys!

  """
  Should the comparator be negated? WARNING: This will throw if used on a comparator that does not support negation.
  """
  negate: Boolean = false
}

input DeviceResolverKeyedOneOfFilterItem {
  """The field to filter on"""
  field: DeviceResolverStringFilterKeys!

  """
  Should the comparator be negated? WARNING: This will throw if used on a comparator that does not support negation.
  """
  negate: Boolean = false
  value: [String!]!
}

input DeviceResolverKeyedStringFilterItem {
  """The comparator to use for the filter"""
  comparison: StringComparator!

  """The field to filter on"""
  field: DeviceResolverStringFilterKeys!

  """
  Should the comparator be negated? WARNING: This will throw if used on a comparator that does not support negation.
  """
  negate: Boolean = false
  value: String!
}

enum DeviceResolverStringFilterKeys {
  deviceId
  expoPushToken
}

type DeviceResource {
  createdAt: DateTimeISO
  expoPushToken: String
  lastLoggedInUser: PersonResource
  lastLogin: LuxonDateTime
  updatedAt: DateTimeISO
  uuid: ID!
}

type EventOccurrenceResource {
  createdAt: DateTimeISO
  fullDay: Boolean!
  interval: LuxonDateRange!
  updatedAt: DateTimeISO
  uuid: ID!
}

enum EventResolverAllKeys {
  createdAt
  description
  duration
  location
  occurrence
  summary
  title
  updatedAt
}

enum EventResolverDateFilterKeys {
  createdAt
  occurrence
  updatedAt
}

input EventResolverKeyedDateFilterItem {
  """The comparator to use for the filter"""
  comparison: NumericComparator!

  """The field to filter on"""
  field: EventResolverDateFilterKeys!

  """
  Should the comparator be negated? WARNING: This will throw if used on a comparator that does not support negation.
  """
  negate: Boolean = false
  value: LuxonDateTime!
}

input EventResolverKeyedIsNullFilterItem {
  """The field to filter on"""
  field: EventResolverAllKeys!

  """
  Should the comparator be negated? WARNING: This will throw if used on a comparator that does not support negation.
  """
  negate: Boolean = false
}

input EventResolverKeyedNumericFilterItem {
  """The comparator to use for the filter"""
  comparison: NumericComparator!

  """The field to filter on"""
  field: EventResolverNumericFilterKeys!

  """
  Should the comparator be negated? WARNING: This will throw if used on a comparator that does not support negation.
  """
  negate: Boolean = false
  value: Float!
}

input EventResolverKeyedOneOfFilterItem {
  """The field to filter on"""
  field: EventResolverStringFilterKeys!

  """
  Should the comparator be negated? WARNING: This will throw if used on a comparator that does not support negation.
  """
  negate: Boolean = false
  value: [String!]!
}

input EventResolverKeyedStringFilterItem {
  """The comparator to use for the filter"""
  comparison: StringComparator!

  """The field to filter on"""
  field: EventResolverStringFilterKeys!

  """
  Should the comparator be negated? WARNING: This will throw if used on a comparator that does not support negation.
  """
  negate: Boolean = false
  value: String!
}

enum EventResolverNumericFilterKeys {
  duration
}

enum EventResolverStringFilterKeys {
  description
  location
  summary
  title
}

type EventResource {
  createdAt: DateTimeISO
  description: String
  images: [ImageResource!]!
  location: String
  occurrences: [EventOccurrenceResource!]!
  summary: String
  title: String!
  updatedAt: DateTimeISO
  uuid: ID!
}

type GetAllConfigurationsResponse implements AbstractGraphQLArrayOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: ConfigurationResource!

  """Whether the operation was successful"""
  ok: Boolean!
}

type GetConfigurationByUuidResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: ConfigurationResource!

  """Whether the operation was successful"""
  ok: Boolean!
}

type GetDeviceByUuidResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: DeviceResource!

  """Whether the operation was successful"""
  ok: Boolean!
}

type GetEventByUuidResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: EventResource!

  """Whether the operation was successful"""
  ok: Boolean!
}

type GetImageByUuidResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: ImageResource!

  """Whether the operation was successful"""
  ok: Boolean!
}

type GetMeResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: PersonResource!

  """Whether the operation was successful"""
  ok: Boolean!
}

type GetNotificationByUuidResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: NotificationResource!

  """Whether the operation was successful"""
  ok: Boolean!
}

type GetPersonByUuidResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: PersonResource!

  """Whether the operation was successful"""
  ok: Boolean!
}

type GetTeamByUuidResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: TeamResource!

  """Whether the operation was successful"""
  ok: Boolean!
}

type GetThumbHashByUuidResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: String!

  """Whether the operation was successful"""
  ok: Boolean!
}

"""API response"""
interface GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]

  """Whether the operation was successful"""
  ok: Boolean!
}

type ImageResource {
  alt: String
  createdAt: DateTimeISO
  height: Int!
  imageData: String
  mimeType: String!
  thumbHash: String
  updatedAt: DateTimeISO
  url: URL
  uuid: ID!
  width: Int!
}

type ListDevicesResponse implements AbstractGraphQLArrayOkResponse & AbstractGraphQLPaginatedResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: [DeviceResource!]!

  """Whether the operation was successful"""
  ok: Boolean!

  """The current page number (1-indexed)"""
  page: PositiveInt!

  """The number of items per page"""
  pageSize: NonNegativeInt!

  """The total number of items"""
  total: NonNegativeInt!
}

type ListEventsResponse implements AbstractGraphQLArrayOkResponse & AbstractGraphQLPaginatedResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: [EventResource!]!

  """Whether the operation was successful"""
  ok: Boolean!

  """The current page number (1-indexed)"""
  page: PositiveInt!

  """The number of items per page"""
  pageSize: NonNegativeInt!

  """The total number of items"""
  total: NonNegativeInt!
}

type ListNotificationsResponse implements AbstractGraphQLArrayOkResponse & AbstractGraphQLPaginatedResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: [NotificationResource!]!

  """Whether the operation was successful"""
  ok: Boolean!

  """The current page number (1-indexed)"""
  page: PositiveInt!

  """The number of items per page"""
  pageSize: NonNegativeInt!

  """The total number of items"""
  total: NonNegativeInt!
}

type ListTeamsResponse implements AbstractGraphQLArrayOkResponse & AbstractGraphQLPaginatedResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: [TeamResource!]!

  """Whether the operation was successful"""
  ok: Boolean!

  """The current page number (1-indexed)"""
  page: PositiveInt!

  """The number of items per page"""
  pageSize: NonNegativeInt!

  """The total number of items"""
  total: NonNegativeInt!
}

type LoginState {
  loggedIn: Boolean!
  role: RoleResource!
}

"""Date range custom scalar type (just an ISO 8601 interval)"""
scalar LuxonDateRange @specifiedBy(url: "https://www.iso.org/iso-8601-date-and-time-format.html")

"""Luxon DateTime custom scalar type"""
scalar LuxonDateTime

type MembershipResource {
  createdAt: DateTimeISO
  person: PersonResource!
  team: TeamResource!
  updatedAt: DateTimeISO
  uuid: ID!
}

type Mutation {
  addExistingImageToEvent(eventId: String!, imageId: String!): AddEventImageResponse!
  addImageToEvent(eventId: String!, input: AddEventImageInput!): AddEventImageResponse!
  createConfiguration(input: CreateConfigurationInput!): CreateConfigurationResponse!
  createDevice(input: CreateDeviceInput!): CreateDeviceResponse!
  createEvent(input: CreateEventInput!): CreateEventResponse!
  createImage(input: CreateImageInput!): CreateImageResponse!
  createPerson(input: CreatePersonInput!): CreatePersonResponse!
  createTeam(input: CreateTeamInput!): CreateTeamResponse!
  deleteConfiguration(uuid: String!): DeleteConfigurationResponse!
  deleteDevice(uuid: String!): DeleteDeviceResponse!
  deleteEvent(uuid: String!): DeleteEventResponse!
  deleteImage(uuid: String!): DeleteImageResponse!
  deleteNotification(uuid: String!): DeleteNotificationResponse!
  deletePerson(uuid: String!): DeletePersonResponse!
  deleteTeam(uuid: String!): DeleteTeamResponse!
  removeImageFromEvent(eventId: String!, imageId: String!): RemoveEventImageResponse!
  sendNotification(input: SendNotificationInput!): SendNotificationResponse!
  setConfiguration(input: SetConfigurationInput!, key: String!): SetConfigurationResponse!
  setEvent(input: SetEventInput!, uuid: String!): SetEventResponse!
}

"""Integers that will have a value of 0 or more."""
scalar NonNegativeInt

type NotificationPayload {
  """
  Only shown for presentation type INFO_POPUP, shown at the bottom of the popup
  """
  message: String
  presentation: NotificationPayloadPresentationType!

  """
  A title for the notification, ignored for presentation type URL, shown with the webview for presentation type IN_APP_VIEW, and shown at the top of the popup for presentation type INFO_POPUP
  """
  title: String

  """
  A URL related to the notification, opened immediately for presentation type URL, opened in a webview for presentation type IN_APP_VIEW, and shown as a button for presentation type INFO_POPUP
  """
  url: String
}

"""
The type of presentation for the notification, URL skips the app and opens a URL directly, IN_APP_VIEW opens a webview, and INFO_POPUP shows a popup
"""
enum NotificationPayloadPresentationType {
  INFO_POPUP
  IN_APP_VIEW
  OPEN_URL
}

enum NotificationResolverAllKeys {
  uuid
}

input NotificationResolverKeyedIsNullFilterItem {
  """The field to filter on"""
  field: NotificationResolverAllKeys!

  """
  Should the comparator be negated? WARNING: This will throw if used on a comparator that does not support negation.
  """
  negate: Boolean = false
}

type NotificationResource {
  body: String!
  createdAt: DateTimeISO
  payload: NotificationPayload
  sendTime: DateTimeISO!
  sound: String
  title: String!
  updatedAt: DateTimeISO
  uuid: ID!
}

enum NumericComparator {
  EQUALS
  GREATER_THAN
  GREATER_THAN_OR_EQUAL_TO
  IS
  LESS_THAN
  LESS_THAN_OR_EQUAL_TO
}

type PersonResource {
  authIds: [AuthIdList!]!
  captaincies: [MembershipResource!]!
  createdAt: DateTimeISO
  email: String!
  firstName: String
  lastName: String
  linkblue: String
  role: RoleResource!
  teams: [MembershipResource!]!
  updatedAt: DateTimeISO
  uuid: ID!
}

"""Integers that will have a value greater than 0."""
scalar PositiveInt

type Query {
  allConfigurations: GetAllConfigurationsResponse!
  configuration(key: String!): GetConfigurationByUuidResponse!
  device(uuid: String!): GetDeviceByUuidResponse!
  devices(
    """The boolean filters to apply to the query"""
    booleanFilters: Void

    """The date filters to apply to the query"""
    dateFilters: [DeviceResolverKeyedDateFilterItem!]

    """The is-null filters to apply to the query"""
    isNullFilters: [DeviceResolverKeyedIsNullFilterItem!]

    """The numeric filters to apply to the query"""
    numericFilters: Void

    """The one-of filters to apply to the query"""
    oneOfFilters: [DeviceResolverKeyedOneOfFilterItem!]

    """The page number to return, defaults to 1"""
    page: Int

    """The number of items to return per page, defaults to 10"""
    pageSize: Int

    """
    The fields to sort by, in order of priority. If unspecified, the sort order is undefined
    """
    sortBy: [String!]

    """
    The direction to sort, if not specified will default to ascending, the order of the values in this array should match the order of the values in the sortBy array, if only one value is specified it will be used for all sortBy values, otherwise the lengths must match
    """
    sortDirection: [SortDirection!]

    """The string filters to apply to the query"""
    stringFilters: [DeviceResolverKeyedStringFilterItem!]
  ): ListDevicesResponse!
  event(uuid: String!): GetEventByUuidResponse!
  events(
    """The boolean filters to apply to the query"""
    booleanFilters: Void

    """The date filters to apply to the query"""
    dateFilters: [EventResolverKeyedDateFilterItem!]

    """The is-null filters to apply to the query"""
    isNullFilters: [EventResolverKeyedIsNullFilterItem!]

    """The numeric filters to apply to the query"""
    numericFilters: [EventResolverKeyedNumericFilterItem!]

    """The one-of filters to apply to the query"""
    oneOfFilters: [EventResolverKeyedOneOfFilterItem!]

    """The page number to return, defaults to 1"""
    page: Int

    """The number of items to return per page, defaults to 10"""
    pageSize: Int

    """
    The fields to sort by, in order of priority. If unspecified, the sort order is undefined
    """
    sortBy: [String!]

    """
    The direction to sort, if not specified will default to ascending, the order of the values in this array should match the order of the values in the sortBy array, if only one value is specified it will be used for all sortBy values, otherwise the lengths must match
    """
    sortDirection: [SortDirection!]

    """The string filters to apply to the query"""
    stringFilters: [EventResolverKeyedStringFilterItem!]
  ): ListEventsResponse!
  image(uuid: String!): GetImageByUuidResponse!
  loginState: LoginState!
  me: GetMeResponse!
  notification(uuid: String!): GetNotificationByUuidResponse!
  notifications(
    """The boolean filters to apply to the query"""
    booleanFilters: Void

    """The date filters to apply to the query"""
    dateFilters: Void

    """The is-null filters to apply to the query"""
    isNullFilters: [NotificationResolverKeyedIsNullFilterItem!]

    """The numeric filters to apply to the query"""
    numericFilters: Void

    """The one-of filters to apply to the query"""
    oneOfFilters: Void

    """The page number to return, defaults to 1"""
    page: Int

    """The number of items to return per page, defaults to 10"""
    pageSize: Int

    """
    The fields to sort by, in order of priority. If unspecified, the sort order is undefined
    """
    sortBy: [String!]

    """
    The direction to sort, if not specified will default to ascending, the order of the values in this array should match the order of the values in the sortBy array, if only one value is specified it will be used for all sortBy values, otherwise the lengths must match
    """
    sortDirection: [SortDirection!]

    """The string filters to apply to the query"""
    stringFilters: Void
  ): ListNotificationsResponse!
  person(uuid: String!): GetPersonByUuidResponse!
  team(uuid: String!): GetTeamByUuidResponse!
  teams(
    """The boolean filters to apply to the query"""
    booleanFilters: Void

    """The date filters to apply to the query"""
    dateFilters: Void

    """The is-null filters to apply to the query"""
    isNullFilters: [TeamResolverKeyedIsNullFilterItem!]
    legacyStatus: TeamLegacyStatus
    marathonYear: String

    """The numeric filters to apply to the query"""
    numericFilters: Void

    """The one-of filters to apply to the query"""
    oneOfFilters: [TeamResolverKeyedOneOfFilterItem!]

    """The page number to return, defaults to 1"""
    page: Int

    """The number of items to return per page, defaults to 10"""
    pageSize: Int

    """
    The fields to sort by, in order of priority. If unspecified, the sort order is undefined
    """
    sortBy: [String!]

    """
    The direction to sort, if not specified will default to ascending, the order of the values in this array should match the order of the values in the sortBy array, if only one value is specified it will be used for all sortBy values, otherwise the lengths must match
    """
    sortDirection: [SortDirection!]

    """The string filters to apply to the query"""
    stringFilters: [TeamResolverKeyedStringFilterItem!]
    type: TeamType
    visibility: DbRole
  ): ListTeamsResponse!
  thumbhash(uuid: String!): GetThumbHashByUuidResponse
}

type RemoveEventImageResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: Boolean!

  """Whether the operation was successful"""
  ok: Boolean!
}

type RoleResource {
  committeeIdentifier: String
  committeeRole: CommitteeRole
  createdAt: DateTimeISO
  dbRole: DbRole!
  updatedAt: DateTimeISO
}

input SendNotificationInput {
  body: String!
  title: String!
}

type SendNotificationResponse implements AbstractGraphQLCreatedResponse & AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: NotificationResource!

  """Whether the operation was successful"""
  ok: Boolean!
  uuid: String!
}

input SetConfigurationInput {
  key: String!
}

type SetConfigurationResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: ConfigurationResource!

  """Whether the operation was successful"""
  ok: Boolean!
}

input SetEventInput {
  description: String
  location: String
  occurrences: [SetEventOccurrenceInput!]!
  summary: String
  title: String!
}

input SetEventOccurrenceInput {
  fullDay: Boolean!
  interval: LuxonDateRange!

  """
  If updating an existing occurrence, the UUID of the occurrence to update
  """
  uuid: String
}

type SetEventResponse implements AbstractGraphQLOkResponse & GraphQLBaseResponse {
  """Client actions to perform"""
  clientActions: [ClientAction!]
  data: EventResource!

  """Whether the operation was successful"""
  ok: Boolean!
}

enum SortDirection {
  ASCENDING
  DESCENDING
}

enum StringComparator {
  ENDS_WITH
  EQUALS
  IS
  LIKE
  REGEX
  STARTS_WITH
  SUBSTRING
}

"""New Team vs Returning Team"""
enum TeamLegacyStatus {
  NewTeam
  ReturningTeam
}

enum TeamResolverAllKeys {
  legacyStatus
  marathonYear
  name
  type
  uuid
  visibility
}

input TeamResolverKeyedIsNullFilterItem {
  """The field to filter on"""
  field: TeamResolverAllKeys!

  """
  Should the comparator be negated? WARNING: This will throw if used on a comparator that does not support negation.
  """
  negate: Boolean = false
}

input TeamResolverKeyedOneOfFilterItem {
  """The field to filter on"""
  field: TeamResolverStringFilterKeys!

  """
  Should the comparator be negated? WARNING: This will throw if used on a comparator that does not support negation.
  """
  negate: Boolean = false
  value: [String!]!
}

input TeamResolverKeyedStringFilterItem {
  """The comparator to use for the filter"""
  comparison: StringComparator!

  """The field to filter on"""
  field: TeamResolverStringFilterKeys!

  """
  Should the comparator be negated? WARNING: This will throw if used on a comparator that does not support negation.
  """
  negate: Boolean = false
  value: String!
}

enum TeamResolverStringFilterKeys {
  name
}

type TeamResource {
  captains: [MembershipResource!]!
  createdAt: DateTimeISO
  legacyStatus: TeamLegacyStatus!
  marathonYear: String!
  members: [MembershipResource!]!
  name: String!
  persistentIdentifier: String
  type: TeamType!
  updatedAt: DateTimeISO
  uuid: ID!
  visibility: DbRole!
}

"""Types of teams"""
enum TeamType {
  Committee
  Morale
  Spirit
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

"""Represents NULL values"""
scalar Void