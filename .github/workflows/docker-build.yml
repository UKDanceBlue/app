#
name: Docker build

on:
  push:
    # Release is a special branch that is kept in sync with the production environment
    # We also want to keep the dev environment in sync with the main branch
    branches: ["release", "main"]
    paths:
      - ".github/workflows/docker-build.yml"
      - "packages/common/**"
      - "packages/portal/**"
      - "packages/server/**"
      - "yarn.lock"
      - ".yarnrc.yml"
      - "Dockerfile"

env:
  REGISTRY: ghcr.io
  PORTAL_IMAGE_NAME: ukdanceblue/app-portal
  SERVER_IMAGE_NAME: ukdanceblue/app-server

jobs:
  build-and-push-images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: portalMeta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.PORTAL_IMAGE_NAME }}
      - name: Extract metadata (tags, labels) for Docker
        id: serverMeta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.SERVER_IMAGE_NAME }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Portal image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.portalMeta.outputs.tags }}
          labels: ${{ steps.portalMeta.outputs.labels }}
          target: portal
          secrets: |
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
      - name: Build and push Server image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.serverMeta.outputs.tags }}
          labels: ${{ steps.serverMeta.outputs.labels }}
          target: server
          secrets: |
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
      # - uses: snok/container-retention-policy@v3.0.0
      #   with:
      #     account: UKDanceBlue
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     image-names:
      #       "${{ env.PORTAL_IMAGE_NAME }} ${{ env.SERVER_IMAGE_NAME }}"
      #     tag-selection: untagged
      #     cut-off: 2w
