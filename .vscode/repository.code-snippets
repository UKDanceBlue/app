{
  // Place your monorepo workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Repository Definition": {
    "scope": "typescript",
    "prefix": "repository",
    "body": [
      "import type { Prisma, PrismaClient } from \"@prisma/client\";",
      "import type {",
      "  FieldsOfListQueryArgs,",
      "} from \"@ukdanceblue/common\";",
      "",
      "import { buildDefaultRepository } from \"./Default.js\";",
      "import type { SimpleUniqueParam } from \"./shared.js\";",
      "",
      "type ${1:Example}UniqueParam = SimpleUniqueParam;",
      "",
      "const ${2:example}Include = {} as const satisfies Prisma.${1:Example}Include;",
      "",
      "export class ${1:Example}Repository extends buildDefaultRepository<",
      "  PrismaClient[\"${2:example}\"],",
      "  ${1:Example}UniqueParam,",
      "  FieldsOfListQueryArgs<List${1:Examples}Args>,",
      "  typeof ${2:example}Include",
      ">(\"${1:Example}\", {",
      "",
      "}) {",
      "  constructor(protected readonly prisma: PrismaClient) {",
      "    super(prisma);",
      "  }",
      "",
      "  public uniqueToWhere(by: SimpleUniqueParam): Prisma.${1:Example}WhereUniqueInput {",
      "    return ${1:Example}Repository.simpleUniqueToWhere(by);",
      "  }",
      "}",
    ],
    "description": "Repository class template",
  },
  "Repository.findAndCount": {
    "scope": "typescript",
    "prefix": "repository.findAndCount",
    "body": [
      "return this.parseFindManyParams(params)",
      "  .toAsyncResult()",
      "  .andThen((params) =>",
      "    this.handleQueryError((tx ?? this.prisma).${1:example}.findMany(params)).map(",
      "      (rows) => ({ rows, params })",
      "    )",
      "  )",
      "  .andThen(({ rows, params }) =>",
      "    this.handleQueryError(",
      "      (tx ?? this.prisma).${1:example}.count({",
      "        where: params.where,",
      "        orderBy: params.orderBy,",
      "      })",
      "    ).map((total) => ({",
      "      selectedRows: rows,",
      "      total,",
      "    }))",
      "  );",
    ],
  },
}
